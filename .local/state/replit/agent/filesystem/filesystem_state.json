{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# LifeCycle AI - Women's Health Companion\n\n## Overview\n\nLifeCycle AI is a comprehensive women's health tracking application that combines cycle monitoring, pregnancy tracking, wellness management, and AI-powered health insights. The application provides personalized health recommendations and allows users to track various aspects of their reproductive and general health through an intuitive web interface.\n\n## Recent Changes (August 2025)\n\n- **Migration Re-completed**: Successfully completed second migration from Replit Agent to standard Replit environment\n- **Dependencies Fixed**: Resolved tsx package installation issue preventing server startup\n- **API Integration Fixed**: Corrected Google Gemini API key configuration for AI functionality\n- **AI Features Restored**: All AI-powered health insights and chat features now working properly\n- **Full Functionality Verified**: Complete application now running with cycle tracking, AI insights, wellness monitoring, and pregnancy journey tracking\n- **AI Services Active**: Google Gemini API integration working properly for health insights and chat (subject to API rate limits)\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\nThe client uses a React-based single-page application (SPA) with the following key decisions:\n- **React with TypeScript**: Chosen for type safety and better developer experience\n- **Wouter for routing**: Lightweight alternative to React Router for client-side navigation\n- **TanStack React Query**: Handles server state management, caching, and data synchronization\n- **Radix UI + Tailwind CSS**: Component library with shadcn/ui for consistent, accessible UI components\n- **Vite build system**: Fast development server and optimized production builds\n\n### Backend Architecture\nThe server follows a REST API pattern built on Express.js:\n- **Express.js server**: Lightweight Node.js framework for API endpoints\n- **TypeScript throughout**: Ensures type safety across the entire stack\n- **Mock storage layer**: Currently uses in-memory storage with interface for future database integration\n- **Route organization**: Modular route handlers for different feature domains (cycles, symptoms, moods, etc.)\n\n### Data Storage Strategy\nThe application uses a dual approach for data persistence:\n- **PostgreSQL with Drizzle ORM**: Configured for production database operations with type-safe queries\n- **Neon Database**: Cloud PostgreSQL provider for serverless database hosting\n- **Schema-first design**: Shared TypeScript types between client and server using Drizzle schema\n- **Mock storage interface**: Allows development without database dependency while maintaining production-ready architecture\n\n### AI Integration\nGoogle's Gemini AI is integrated for health insights and assistance:\n- **Health insights generation**: Analyzes user data patterns to provide personalized recommendations\n- **Interactive chat assistance**: Real-time health question answering\n- **Structured response handling**: JSON-formatted AI responses for consistent data processing\n- **Privacy-conscious design**: User data stays within the application context\n\n### Authentication & Session Management\nCurrently uses a simplified approach suitable for development:\n- **Mock user system**: Single hardcoded user for development and testing\n- **Session handling**: Prepared infrastructure for future authentication implementation\n- **User profile management**: Complete CRUD operations for user data\n\n### Progressive Web App (PWA) Features\nThe application includes PWA capabilities:\n- **Service worker**: Caching strategy for offline functionality\n- **Web app manifest**: Native app-like installation and appearance\n- **Push notifications**: Infrastructure for health reminders and alerts\n\n### Component Architecture\nFrontend components follow a hierarchical structure:\n- **Layout components**: Global navigation and theme management\n- **Feature-specific components**: Organized by domain (cycle, pregnancy, wellness, AI)\n- **Shared UI components**: Reusable components from shadcn/ui library\n- **Custom hooks**: Encapsulated logic for theme management and mobile detection\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React 18**: Frontend framework with modern hooks and concurrent features\n- **Express.js**: Backend web framework for Node.js\n- **TypeScript**: Type safety across the entire application stack\n- **Vite**: Build tool and development server\n\n### Database & ORM\n- **Drizzle ORM**: Type-safe database queries and schema management\n- **@neondatabase/serverless**: Serverless PostgreSQL database driver\n- **PostgreSQL**: Primary database system (configured via DATABASE_URL)\n\n### AI Services\n- **@google/genai**: Google Gemini AI integration for health insights and chat functionality\n\n### UI & Styling\n- **@radix-ui/***: Accessible, unstyled UI primitives for complex components\n- **Tailwind CSS**: Utility-first CSS framework for styling\n- **class-variance-authority**: Type-safe variant API for component styling\n- **Lucide React**: Icon library for consistent iconography\n\n### State Management & Data Fetching\n- **@tanstack/react-query**: Server state management and caching\n- **React Hook Form**: Form state management and validation\n- **Zod**: Runtime type validation and schema validation\n\n### Development & Build Tools\n- **tsx**: TypeScript execution for development server\n- **esbuild**: Fast JavaScript bundler for production builds\n- **PostCSS & Autoprefixer**: CSS processing and vendor prefixing\n\n### Additional Features\n- **date-fns**: Date manipulation and formatting utilities\n- **wouter**: Lightweight client-side routing\n- **connect-pg-simple**: PostgreSQL session store (prepared for authentication)\n\nThe architecture prioritizes type safety, developer experience, and scalability while maintaining a clear separation of concerns between frontend presentation, backend API logic, and data persistence layers.","size_bytes":5985},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"var(--primary-50)\",\n          100: \"var(--primary-100)\",\n          200: \"var(--primary-200)\",\n          300: \"var(--primary-300)\",\n          400: \"var(--primary-400)\",\n          500: \"var(--primary-500)\",\n          600: \"var(--primary-600)\",\n          700: \"var(--primary-700)\",\n          800: \"var(--primary-800)\",\n          900: \"var(--primary-900)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sage: {\n          50: \"var(--sage-50)\",\n          100: \"var(--sage-100)\",\n          200: \"var(--sage-200)\",\n          300: \"var(--sage-300)\",\n          400: \"var(--sage-400)\",\n          500: \"var(--sage-500)\",\n          600: \"var(--sage-600)\",\n          700: \"var(--sage-700)\",\n          800: \"var(--sage-800)\",\n          900: \"var(--sage-900)\",\n        },\n        coral: {\n          50: \"var(--coral-50)\",\n          100: \"var(--coral-100)\",\n          200: \"var(--coral-200)\",\n          300: \"var(--coral-300)\",\n          400: \"var(--coral-400)\",\n          500: \"var(--coral-500)\",\n          600: \"var(--coral-600)\",\n          700: \"var(--coral-700)\",\n          800: \"var(--coral-800)\",\n          900: \"var(--coral-900)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3480},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, insertCycleSchema, insertSymptomSchema, \n  insertMoodSchema, insertNutritionSchema, insertWellnessSchema,\n  insertPregnancyMilestoneSchema, insertReminderSchema\n} from \"@shared/schema\";\nimport { generateHealthInsights, answerHealthQuestion } from \"./services/gemini\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Mock user ID for development (in production, use proper authentication)\n  const MOCK_USER_ID = \"user-1\";\n\n  // Create a mock user if it doesn't exist\n  const initUser = async () => {\n    const existingUser = await storage.getUser(MOCK_USER_ID);\n    if (!existingUser) {\n      console.log(\"Creating mock user...\");\n      const newUser = await storage.createUserWithId(MOCK_USER_ID, {\n        username: \"anna\",\n        email: \"anna@example.com\",\n        password: \"password\",\n        name: \"Anna\",\n        dateOfBirth: \"1990-05-15\",\n        isPregnant: false,\n        pregnancyDueDate: null\n      });\n      console.log(\"Mock user created:\", newUser);\n    } else {\n      console.log(\"Mock user already exists\");\n    }\n  };\n  \n  // Initialize user on startup\n  await initUser();\n\n  // Users\n  app.get(\"/api/user/profile\", async (req, res) => {\n    try {\n      const user = await storage.getUser(MOCK_USER_ID);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user profile\" });\n    }\n  });\n\n  app.put(\"/api/user/profile\", async (req, res) => {\n    try {\n      const updates = req.body;\n      const user = await storage.updateUser(MOCK_USER_ID, updates);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update user profile\" });\n    }\n  });\n\n  // Cycles\n  app.get(\"/api/cycles\", async (req, res) => {\n    try {\n      const cycles = await storage.getCyclesByUserId(MOCK_USER_ID);\n      res.json(cycles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get cycles\" });\n    }\n  });\n\n  app.get(\"/api/cycles/current\", async (req, res) => {\n    try {\n      const cycle = await storage.getCurrentCycle(MOCK_USER_ID);\n      res.json(cycle);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get current cycle\" });\n    }\n  });\n\n  app.post(\"/api/cycles\", async (req, res) => {\n    try {\n      const validatedData = insertCycleSchema.parse({\n        ...req.body,\n        userId: MOCK_USER_ID\n      });\n      const cycle = await storage.createCycle(validatedData);\n      res.json(cycle);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid cycle data\" });\n    }\n  });\n\n  // Symptoms\n  app.get(\"/api/symptoms\", async (req, res) => {\n    try {\n      const { date } = req.query;\n      const symptoms = await storage.getSymptomsByUserId(\n        MOCK_USER_ID, \n        date as string\n      );\n      res.json(symptoms);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get symptoms\" });\n    }\n  });\n\n  app.post(\"/api/symptoms\", async (req, res) => {\n    try {\n      const validatedData = insertSymptomSchema.parse({\n        ...req.body,\n        userId: MOCK_USER_ID\n      });\n      const symptom = await storage.createSymptom(validatedData);\n      res.json(symptom);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid symptom data\" });\n    }\n  });\n\n  // Moods\n  app.get(\"/api/moods\", async (req, res) => {\n    try {\n      const { start, end } = req.query;\n      const dateRange = start && end ? { start: start as string, end: end as string } : undefined;\n      const moods = await storage.getMoodsByUserId(MOCK_USER_ID, dateRange);\n      res.json(moods);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get moods\" });\n    }\n  });\n\n  app.post(\"/api/moods\", async (req, res) => {\n    try {\n      const validatedData = insertMoodSchema.parse({\n        ...req.body,\n        userId: MOCK_USER_ID\n      });\n      const mood = await storage.createMood(validatedData);\n      res.json(mood);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid mood data\" });\n    }\n  });\n\n  // Nutrition\n  app.get(\"/api/nutrition\", async (req, res) => {\n    try {\n      const { date } = req.query;\n      const nutrition = await storage.getNutritionByUserId(\n        MOCK_USER_ID, \n        date as string\n      );\n      res.json(nutrition);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get nutrition data\" });\n    }\n  });\n\n  app.post(\"/api/nutrition\", async (req, res) => {\n    try {\n      const validatedData = insertNutritionSchema.parse({\n        ...req.body,\n        userId: MOCK_USER_ID\n      });\n      const nutrition = await storage.createNutrition(validatedData);\n      res.json(nutrition);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid nutrition data\" });\n    }\n  });\n\n  // Wellness\n  app.get(\"/api/wellness\", async (req, res) => {\n    try {\n      const { start, end } = req.query;\n      const dateRange = start && end ? { start: start as string, end: end as string } : undefined;\n      const wellness = await storage.getWellnessByUserId(MOCK_USER_ID, dateRange);\n      res.json(wellness);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get wellness data\" });\n    }\n  });\n\n  app.post(\"/api/wellness\", async (req, res) => {\n    try {\n      const validatedData = insertWellnessSchema.parse({\n        ...req.body,\n        userId: MOCK_USER_ID\n      });\n      const wellness = await storage.createWellness(validatedData);\n      res.json(wellness);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid wellness data\" });\n    }\n  });\n\n  // Pregnancy\n  app.get(\"/api/pregnancy/milestones\", async (req, res) => {\n    try {\n      const milestones = await storage.getPregnancyMilestonesByUserId(MOCK_USER_ID);\n      res.json(milestones);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get pregnancy milestones\" });\n    }\n  });\n\n  app.post(\"/api/pregnancy/milestones\", async (req, res) => {\n    try {\n      const validatedData = insertPregnancyMilestoneSchema.parse({\n        ...req.body,\n        userId: MOCK_USER_ID\n      });\n      const milestone = await storage.createPregnancyMilestone(validatedData);\n      res.json(milestone);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid pregnancy milestone data\" });\n    }\n  });\n\n  // AI Insights\n  app.get(\"/api/ai/insights\", async (req, res) => {\n    try {\n      const { type } = req.query;\n      const insights = await storage.getAiInsightsByUserId(\n        MOCK_USER_ID, \n        type as string\n      );\n      res.json(insights);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get AI insights\" });\n    }\n  });\n\n  app.post(\"/api/ai/generate-insights\", async (req, res) => {\n    try {\n      // Get user data for context\n      const cycles = await storage.getCyclesByUserId(MOCK_USER_ID);\n      const symptoms = await storage.getSymptomsByUserId(MOCK_USER_ID);\n      const moods = await storage.getMoodsByUserId(MOCK_USER_ID);\n      const wellness = await storage.getWellnessByUserId(MOCK_USER_ID);\n\n      const insights = await generateHealthInsights({\n        cycles,\n        symptoms,\n        moods,\n        wellness\n      });\n\n      // Store insights\n      for (const insight of insights) {\n        await storage.createAiInsight({\n          userId: MOCK_USER_ID,\n          type: insight.type,\n          content: insight.content,\n          metadata: insight.metadata\n        });\n      }\n\n      res.json(insights);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to generate AI insights\" });\n    }\n  });\n\n  app.post(\"/api/ai/chat\", async (req, res) => {\n    try {\n      const { question } = req.body;\n      \n      if (!question) {\n        return res.status(400).json({ message: \"Question is required\" });\n      }\n\n      // Get user data for context\n      const user = await storage.getUser(MOCK_USER_ID);\n      const cycles = await storage.getCyclesByUserId(MOCK_USER_ID);\n      const symptoms = await storage.getSymptomsByUserId(MOCK_USER_ID);\n      const moods = await storage.getMoodsByUserId(MOCK_USER_ID);\n\n      const answer = await answerHealthQuestion(question, {\n        user,\n        cycles,\n        symptoms,\n        moods\n      });\n\n      res.json({ answer });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get AI response\" });\n    }\n  });\n\n  // Reminders\n  app.get(\"/api/reminders\", async (req, res) => {\n    try {\n      const reminders = await storage.getRemindersByUserId(MOCK_USER_ID);\n      res.json(reminders);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get reminders\" });\n    }\n  });\n\n  app.post(\"/api/reminders\", async (req, res) => {\n    try {\n      const validatedData = insertReminderSchema.parse({\n        ...req.body,\n        userId: MOCK_USER_ID\n      });\n      const reminder = await storage.createReminder(validatedData);\n      res.json(reminder);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid reminder data\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n\n      const [\n        currentCycle,\n        todayWellness,\n        todaySymptoms,\n        todayMood,\n        weeklyWellness\n      ] = await Promise.all([\n        storage.getCurrentCycle(MOCK_USER_ID),\n        storage.getWellnessByUserId(MOCK_USER_ID, { start: today, end: today }),\n        storage.getSymptomsByUserId(MOCK_USER_ID, today),\n        storage.getMoodsByUserId(MOCK_USER_ID, { start: today, end: today }),\n        storage.getWellnessByUserId(MOCK_USER_ID, { start: weekAgo, end: today })\n      ]);\n\n      const stats = {\n        cycleDay: currentCycle ? calculateCycleDay(currentCycle) : 0,\n        steps: todayWellness[0]?.steps || 0,\n        sleepHours: todayWellness[0]?.sleepHours || 0,\n        mood: todayMood[0]?.mood || 'neutral',\n        symptoms: todaySymptoms.map(s => s.type),\n        weeklyProgress: {\n          water: weeklyWellness.reduce((sum, w) => sum + (w.waterIntake || 0), 0),\n          exercise: weeklyWellness.filter(w => (w.exerciseMinutes || 0) > 0).length,\n          sleep: weeklyWellness.reduce((sum, w) => sum + (w.sleepHours || 0), 0)\n        }\n      };\n\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get dashboard stats\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\nfunction calculateCycleDay(cycle: any): number {\n  const today = new Date();\n  const startDate = new Date(cycle.startDate);\n  const diffTime = Math.abs(today.getTime() - startDate.getTime());\n  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n  return diffDays;\n}\n","size_bytes":11142},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type Cycle, type InsertCycle,\n  type Symptom, type InsertSymptom, type Mood, type InsertMood,\n  type Nutrition, type InsertNutrition, type Wellness, type InsertWellness,\n  type PregnancyMilestone, type InsertPregnancyMilestone,\n  type AiInsight, type InsertAiInsight, type Reminder, type InsertReminder\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createUserWithId(id: string, user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // Cycles\n  getCyclesByUserId(userId: string): Promise<Cycle[]>;\n  getCurrentCycle(userId: string): Promise<Cycle | undefined>;\n  createCycle(cycle: InsertCycle): Promise<Cycle>;\n  updateCycle(id: string, updates: Partial<Cycle>): Promise<Cycle | undefined>;\n\n  // Symptoms\n  getSymptomsByUserId(userId: string, date?: string): Promise<Symptom[]>;\n  createSymptom(symptom: InsertSymptom): Promise<Symptom>;\n  updateSymptom(id: string, updates: Partial<Symptom>): Promise<Symptom | undefined>;\n\n  // Moods\n  getMoodsByUserId(userId: string, dateRange?: { start: string; end: string }): Promise<Mood[]>;\n  createMood(mood: InsertMood): Promise<Mood>;\n  updateMood(id: string, updates: Partial<Mood>): Promise<Mood | undefined>;\n\n  // Nutrition\n  getNutritionByUserId(userId: string, date?: string): Promise<Nutrition[]>;\n  createNutrition(nutrition: InsertNutrition): Promise<Nutrition>;\n  updateNutrition(id: string, updates: Partial<Nutrition>): Promise<Nutrition | undefined>;\n\n  // Wellness\n  getWellnessByUserId(userId: string, dateRange?: { start: string; end: string }): Promise<Wellness[]>;\n  createWellness(wellness: InsertWellness): Promise<Wellness>;\n  updateWellness(id: string, updates: Partial<Wellness>): Promise<Wellness | undefined>;\n\n  // Pregnancy\n  getPregnancyMilestonesByUserId(userId: string): Promise<PregnancyMilestone[]>;\n  createPregnancyMilestone(milestone: InsertPregnancyMilestone): Promise<PregnancyMilestone>;\n  updatePregnancyMilestone(id: string, updates: Partial<PregnancyMilestone>): Promise<PregnancyMilestone | undefined>;\n\n  // AI Insights\n  getAiInsightsByUserId(userId: string, type?: string): Promise<AiInsight[]>;\n  createAiInsight(insight: InsertAiInsight): Promise<AiInsight>;\n\n  // Reminders\n  getRemindersByUserId(userId: string): Promise<Reminder[]>;\n  createReminder(reminder: InsertReminder): Promise<Reminder>;\n  updateReminder(id: string, updates: Partial<Reminder>): Promise<Reminder | undefined>;\n  deleteReminder(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private cycles: Map<string, Cycle> = new Map();\n  private symptoms: Map<string, Symptom> = new Map();\n  private moods: Map<string, Mood> = new Map();\n  private nutrition: Map<string, Nutrition> = new Map();\n  private wellness: Map<string, Wellness> = new Map();\n  private pregnancyMilestones: Map<string, PregnancyMilestone> = new Map();\n  private aiInsights: Map<string, AiInsight> = new Map();\n  private reminders: Map<string, Reminder> = new Map();\n\n  // Users\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date(),\n      dateOfBirth: insertUser.dateOfBirth ?? null,\n      isPregnant: insertUser.isPregnant ?? false,\n      pregnancyDueDate: insertUser.pregnancyDueDate ?? null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createUserWithId(id: string, insertUser: InsertUser): Promise<User> {\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date(),\n      dateOfBirth: insertUser.dateOfBirth ?? null,\n      isPregnant: insertUser.isPregnant ?? false,\n      pregnancyDueDate: insertUser.pregnancyDueDate ?? null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const user = this.users.get(id);\n    if (!user) return undefined;\n    const updated = { ...user, ...updates };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  // Cycles\n  async getCyclesByUserId(userId: string): Promise<Cycle[]> {\n    return Array.from(this.cycles.values())\n      .filter(cycle => cycle.userId === userId)\n      .sort((a, b) => new Date(b.startDate).getTime() - new Date(a.startDate).getTime());\n  }\n\n  async getCurrentCycle(userId: string): Promise<Cycle | undefined> {\n    const cycles = await this.getCyclesByUserId(userId);\n    return cycles.find(cycle => !cycle.endDate) || cycles[0];\n  }\n\n  async createCycle(insertCycle: InsertCycle): Promise<Cycle> {\n    const id = randomUUID();\n    const cycle: Cycle = { \n      ...insertCycle, \n      id, \n      createdAt: new Date(),\n      endDate: insertCycle.endDate ?? null,\n      length: insertCycle.length ?? null,\n      flowIntensity: insertCycle.flowIntensity ?? null,\n      ovulationDate: insertCycle.ovulationDate ?? null\n    };\n    this.cycles.set(id, cycle);\n    return cycle;\n  }\n\n  async updateCycle(id: string, updates: Partial<Cycle>): Promise<Cycle | undefined> {\n    const cycle = this.cycles.get(id);\n    if (!cycle) return undefined;\n    const updated = { ...cycle, ...updates };\n    this.cycles.set(id, updated);\n    return updated;\n  }\n\n  // Symptoms\n  async getSymptomsByUserId(userId: string, date?: string): Promise<Symptom[]> {\n    return Array.from(this.symptoms.values())\n      .filter(symptom => \n        symptom.userId === userId && \n        (!date || symptom.date === date)\n      )\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async createSymptom(insertSymptom: InsertSymptom): Promise<Symptom> {\n    const id = randomUUID();\n    const symptom: Symptom = { \n      ...insertSymptom, \n      id, \n      createdAt: new Date(),\n      cycleId: insertSymptom.cycleId ?? null,\n      notes: insertSymptom.notes ?? null\n    };\n    this.symptoms.set(id, symptom);\n    return symptom;\n  }\n\n  async updateSymptom(id: string, updates: Partial<Symptom>): Promise<Symptom | undefined> {\n    const symptom = this.symptoms.get(id);\n    if (!symptom) return undefined;\n    const updated = { ...symptom, ...updates };\n    this.symptoms.set(id, updated);\n    return updated;\n  }\n\n  // Moods\n  async getMoodsByUserId(userId: string, dateRange?: { start: string; end: string }): Promise<Mood[]> {\n    return Array.from(this.moods.values())\n      .filter(mood => {\n        if (mood.userId !== userId) return false;\n        if (!dateRange) return true;\n        const moodDate = new Date(mood.date);\n        return moodDate >= new Date(dateRange.start) && moodDate <= new Date(dateRange.end);\n      })\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async createMood(insertMood: InsertMood): Promise<Mood> {\n    const id = randomUUID();\n    const mood: Mood = { \n      ...insertMood, \n      id, \n      createdAt: new Date(),\n      notes: insertMood.notes ?? null\n    };\n    this.moods.set(id, mood);\n    return mood;\n  }\n\n  async updateMood(id: string, updates: Partial<Mood>): Promise<Mood | undefined> {\n    const mood = this.moods.get(id);\n    if (!mood) return undefined;\n    const updated = { ...mood, ...updates };\n    this.moods.set(id, updated);\n    return updated;\n  }\n\n  // Nutrition\n  async getNutritionByUserId(userId: string, date?: string): Promise<Nutrition[]> {\n    return Array.from(this.nutrition.values())\n      .filter(nutrition => \n        nutrition.userId === userId && \n        (!date || nutrition.date === date)\n      )\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async createNutrition(insertNutrition: InsertNutrition): Promise<Nutrition> {\n    const id = randomUUID();\n    const nutrition: Nutrition = { \n      ...insertNutrition, \n      id, \n      createdAt: new Date(),\n      notes: insertNutrition.notes ?? null,\n      calories: insertNutrition.calories ?? null\n    };\n    this.nutrition.set(id, nutrition);\n    return nutrition;\n  }\n\n  async updateNutrition(id: string, updates: Partial<Nutrition>): Promise<Nutrition | undefined> {\n    const nutrition = this.nutrition.get(id);\n    if (!nutrition) return undefined;\n    const updated = { ...nutrition, ...updates };\n    this.nutrition.set(id, updated);\n    return updated;\n  }\n\n  // Wellness\n  async getWellnessByUserId(userId: string, dateRange?: { start: string; end: string }): Promise<Wellness[]> {\n    return Array.from(this.wellness.values())\n      .filter(wellness => {\n        if (wellness.userId !== userId) return false;\n        if (!dateRange) return true;\n        const wellnessDate = new Date(wellness.date);\n        return wellnessDate >= new Date(dateRange.start) && wellnessDate <= new Date(dateRange.end);\n      })\n      .sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n  }\n\n  async createWellness(insertWellness: InsertWellness): Promise<Wellness> {\n    const id = randomUUID();\n    const wellness: Wellness = { \n      ...insertWellness, \n      id, \n      createdAt: new Date(),\n      steps: insertWellness.steps ?? null,\n      waterIntake: insertWellness.waterIntake ?? null,\n      sleepHours: insertWellness.sleepHours ?? null,\n      sleepQuality: insertWellness.sleepQuality ?? null,\n      exerciseMinutes: insertWellness.exerciseMinutes ?? null\n    };\n    this.wellness.set(id, wellness);\n    return wellness;\n  }\n\n  async updateWellness(id: string, updates: Partial<Wellness>): Promise<Wellness | undefined> {\n    const wellness = this.wellness.get(id);\n    if (!wellness) return undefined;\n    const updated = { ...wellness, ...updates };\n    this.wellness.set(id, updated);\n    return updated;\n  }\n\n  // Pregnancy\n  async getPregnancyMilestonesByUserId(userId: string): Promise<PregnancyMilestone[]> {\n    return Array.from(this.pregnancyMilestones.values())\n      .filter(milestone => milestone.userId === userId)\n      .sort((a, b) => b.week - a.week);\n  }\n\n  async createPregnancyMilestone(insertMilestone: InsertPregnancyMilestone): Promise<PregnancyMilestone> {\n    const id = randomUUID();\n    const milestone: PregnancyMilestone = { \n      ...insertMilestone, \n      id, \n      createdAt: new Date(),\n      notes: insertMilestone.notes ?? null,\n      weight: insertMilestone.weight ?? null,\n      appointments: insertMilestone.appointments ?? null\n    };\n    this.pregnancyMilestones.set(id, milestone);\n    return milestone;\n  }\n\n  async updatePregnancyMilestone(id: string, updates: Partial<PregnancyMilestone>): Promise<PregnancyMilestone | undefined> {\n    const milestone = this.pregnancyMilestones.get(id);\n    if (!milestone) return undefined;\n    const updated = { ...milestone, ...updates };\n    this.pregnancyMilestones.set(id, updated);\n    return updated;\n  }\n\n  // AI Insights\n  async getAiInsightsByUserId(userId: string, type?: string): Promise<AiInsight[]> {\n    return Array.from(this.aiInsights.values())\n      .filter(insight => \n        insight.userId === userId && \n        (!type || insight.type === type)\n      )\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createAiInsight(insertInsight: InsertAiInsight): Promise<AiInsight> {\n    const id = randomUUID();\n    const insight: AiInsight = { \n      ...insertInsight, \n      id, \n      createdAt: new Date(),\n      metadata: insertInsight.metadata ?? null\n    };\n    this.aiInsights.set(id, insight);\n    return insight;\n  }\n\n  // Reminders\n  async getRemindersByUserId(userId: string): Promise<Reminder[]> {\n    return Array.from(this.reminders.values())\n      .filter(reminder => reminder.userId === userId && reminder.isActive)\n      .sort((a, b) => a.time.localeCompare(b.time));\n  }\n\n  async createReminder(insertReminder: InsertReminder): Promise<Reminder> {\n    const id = randomUUID();\n    const reminder: Reminder = { \n      ...insertReminder, \n      id, \n      createdAt: new Date(),\n      isActive: insertReminder.isActive ?? true\n    };\n    this.reminders.set(id, reminder);\n    return reminder;\n  }\n\n  async updateReminder(id: string, updates: Partial<Reminder>): Promise<Reminder | undefined> {\n    const reminder = this.reminders.get(id);\n    if (!reminder) return undefined;\n    const updated = { ...reminder, ...updates };\n    this.reminders.set(id, updated);\n    return updated;\n  }\n\n  async deleteReminder(id: string): Promise<boolean> {\n    return this.reminders.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":13164},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, timestamp, jsonb, real } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  dateOfBirth: text(\"date_of_birth\"),\n  isPregnant: boolean(\"is_pregnant\").default(false),\n  pregnancyDueDate: text(\"pregnancy_due_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const cycles = pgTable(\"cycles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  startDate: text(\"start_date\").notNull(),\n  endDate: text(\"end_date\"),\n  length: integer(\"length\"),\n  flowIntensity: integer(\"flow_intensity\"), // 1-5 scale\n  ovulationDate: text(\"ovulation_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const symptoms = pgTable(\"symptoms\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  cycleId: varchar(\"cycle_id\").references(() => cycles.id),\n  date: text(\"date\").notNull(),\n  type: text(\"type\").notNull(), // cramps, headache, bloating, etc.\n  severity: integer(\"severity\").notNull(), // 1-5 scale\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const moods = pgTable(\"moods\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  date: text(\"date\").notNull(),\n  mood: text(\"mood\").notNull(), // happy, sad, anxious, excited, etc.\n  energyLevel: integer(\"energy_level\").notNull(), // 1-10 scale\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const nutrition = pgTable(\"nutrition\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  date: text(\"date\").notNull(),\n  mealType: text(\"meal_type\").notNull(), // breakfast, lunch, dinner, snack\n  description: text(\"description\").notNull(),\n  calories: integer(\"calories\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const wellness = pgTable(\"wellness\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  date: text(\"date\").notNull(),\n  steps: integer(\"steps\"),\n  waterIntake: real(\"water_intake\"), // in liters\n  sleepHours: real(\"sleep_hours\"),\n  sleepQuality: integer(\"sleep_quality\"), // 1-5 scale\n  exerciseMinutes: integer(\"exercise_minutes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const pregnancyMilestones = pgTable(\"pregnancy_milestones\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  week: integer(\"week\").notNull(),\n  weight: real(\"weight\"),\n  notes: text(\"notes\"),\n  appointments: jsonb(\"appointments\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const aiInsights = pgTable(\"ai_insights\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull(), // cycle_prediction, health_tip, symptom_analysis\n  content: text(\"content\").notNull(),\n  metadata: jsonb(\"metadata\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const reminders = pgTable(\"reminders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull(), // medication, hydration, exercise\n  title: text(\"title\").notNull(),\n  time: text(\"time\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCycleSchema = createInsertSchema(cycles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertSymptomSchema = createInsertSchema(symptoms).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMoodSchema = createInsertSchema(moods).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNutritionSchema = createInsertSchema(nutrition).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertWellnessSchema = createInsertSchema(wellness).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPregnancyMilestoneSchema = createInsertSchema(pregnancyMilestones).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAiInsightSchema = createInsertSchema(aiInsights).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertReminderSchema = createInsertSchema(reminders).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Cycle = typeof cycles.$inferSelect;\nexport type InsertCycle = z.infer<typeof insertCycleSchema>;\nexport type Symptom = typeof symptoms.$inferSelect;\nexport type InsertSymptom = z.infer<typeof insertSymptomSchema>;\nexport type Mood = typeof moods.$inferSelect;\nexport type InsertMood = z.infer<typeof insertMoodSchema>;\nexport type Nutrition = typeof nutrition.$inferSelect;\nexport type InsertNutrition = z.infer<typeof insertNutritionSchema>;\nexport type Wellness = typeof wellness.$inferSelect;\nexport type InsertWellness = z.infer<typeof insertWellnessSchema>;\nexport type PregnancyMilestone = typeof pregnancyMilestones.$inferSelect;\nexport type InsertPregnancyMilestone = z.infer<typeof insertPregnancyMilestoneSchema>;\nexport type AiInsight = typeof aiInsights.$inferSelect;\nexport type InsertAiInsight = z.infer<typeof insertAiInsightSchema>;\nexport type Reminder = typeof reminders.$inferSelect;\nexport type InsertReminder = z.infer<typeof insertReminderSchema>;\n","size_bytes":6218},"client/public/sw.js":{"content":"const CACHE_NAME = 'lifecycle-ai-v1';\nconst urlsToCache = [\n  '/',\n  '/static/js/bundle.js',\n  '/static/css/main.css',\n  '/manifest.json'\n];\n\nself.addEventListener('install', (event) => {\n  event.waitUntil(\n    caches.open(CACHE_NAME)\n      .then((cache) => cache.addAll(urlsToCache))\n  );\n});\n\nself.addEventListener('fetch', (event) => {\n  event.respondWith(\n    caches.match(event.request)\n      .then((response) => {\n        // Return cached version or fetch from network\n        return response || fetch(event.request);\n      })\n  );\n});\n\n// Handle push notifications\nself.addEventListener('push', (event) => {\n  const options = {\n    body: event.data ? event.data.text() : 'New notification from LifeCycle AI',\n    icon: '/favicon.ico',\n    badge: '/favicon.ico',\n    tag: 'lifecycle-notification'\n  };\n\n  event.waitUntil(\n    self.registration.showNotification('LifeCycle AI', options)\n  );\n});\n","size_bytes":901},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/ThemeProvider\";\nimport { Layout } from \"@/components/Layout\";\n\n// Pages\nimport Dashboard from \"@/pages/Dashboard\";\nimport CycleTracking from \"@/pages/CycleTracking\";\nimport PregnancyTracking from \"@/pages/PregnancyTracking\";\nimport Wellness from \"@/pages/Wellness\";\nimport AIAssistant from \"@/pages/AIAssistant\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/cycle\" component={CycleTracking} />\n        <Route path=\"/pregnancy\" component={PregnancyTracking} />\n        <Route path=\"/wellness\" component={Wellness} />\n        <Route path=\"/ai\" component={AIAssistant} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  // Register service worker for PWA\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      navigator.serviceWorker.register('/sw.js')\n        .then((registration) => {\n          console.log('SW registered: ', registration);\n        })\n        .catch((registrationError) => {\n          console.log('SW registration failed: ', registrationError);\n        });\n    });\n  }\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1753},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(240 10% 3.9%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(240 10% 3.9%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(240 10% 3.9%);\n  --primary: hsl(262 83% 58%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(240 4.8% 95.9%);\n  --secondary-foreground: hsl(240 5.9% 10%);\n  --muted: hsl(240 4.8% 95.9%);\n  --muted-foreground: hsl(240 3.8% 46.1%);\n  --accent: hsl(240 4.8% 95.9%);\n  --accent-foreground: hsl(240 5.9% 10%);\n  --destructive: hsl(0 84.2% 60.2%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(240 5.9% 90%);\n  --input: hsl(240 5.9% 90%);\n  --ring: hsl(262 83% 58%);\n  --chart-1: hsl(262 83% 58%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n  --radius: 0.5rem;\n  \n  /* Custom pastel colors from design */\n  --primary-50: hsl(270 100% 98%);\n  --primary-100: hsl(269 100% 95%);\n  --primary-200: hsl(269 100% 92%);\n  --primary-300: hsl(269 64% 85%);\n  --primary-400: hsl(270 54% 76%);\n  --primary-500: hsl(262 83% 58%);\n  --primary-600: hsl(262 71% 50%);\n  --primary-700: hsl(263 70% 41%);\n  --primary-800: hsl(263 69% 35%);\n  --primary-900: hsl(264 69% 30%);\n  \n  --sage-50: hsl(120 60% 97%);\n  --sage-100: hsl(120 60% 95%);\n  --sage-200: hsl(120 13% 85%);\n  --sage-300: hsl(120 9% 69%);\n  --sage-400: hsl(120 6% 56%);\n  --sage-500: hsl(120 6% 42%);\n  --sage-600: hsl(120 7% 30%);\n  --sage-700: hsl(120 10% 25%);\n  --sage-800: hsl(120 13% 13%);\n  --sage-900: hsl(120 15% 6%);\n  \n  --coral-50: hsl(0 86% 97%);\n  --coral-100: hsl(0 93% 94%);\n  --coral-200: hsl(0 96% 89%);\n  --coral-300: hsl(0 94% 82%);\n  --coral-400: hsl(0 91% 71%);\n  --coral-500: hsl(0 91% 71%);\n  --coral-600: hsl(0 84% 60%);\n  --coral-700: hsl(0 72% 51%);\n  --coral-800: hsl(0 70% 42%);\n  --coral-900: hsl(0 63% 31%);\n  \n  --font-sans: Inter, sans-serif;\n}\n\n.dark {\n  --background: hsl(240 10% 3.9%);\n  --foreground: hsl(0 0% 98%);\n  --card: hsl(240 10% 3.9%);\n  --card-foreground: hsl(0 0% 98%);\n  --popover: hsl(240 10% 3.9%);\n  --popover-foreground: hsl(0 0% 98%);\n  --primary: hsl(262 83% 58%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(240 3.7% 15.9%);\n  --secondary-foreground: hsl(0 0% 98%);\n  --muted: hsl(240 3.7% 15.9%);\n  --muted-foreground: hsl(240 5% 64.9%);\n  --accent: hsl(240 3.7% 15.9%);\n  --accent-foreground: hsl(0 0% 98%);\n  --destructive: hsl(0 62.8% 30.6%);\n  --destructive-foreground: hsl(0 0% 98%);\n  --border: hsl(240 3.7% 15.9%);\n  --input: hsl(240 3.7% 15.9%);\n  --ring: hsl(262 83% 58%);\n  --chart-1: hsl(262 83% 58%);\n  --chart-2: hsl(160 60% 45%);\n  --chart-3: hsl(30 80% 55%);\n  --chart-4: hsl(280 65% 60%);\n  --chart-5: hsl(340 75% 55%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n}\n\n@layer utilities {\n  .gradient-bg {\n    background: linear-gradient(135deg, var(--primary-50) 0%, var(--sage-50) 100%);\n  }\n  \n  .dark .gradient-bg {\n    background: linear-gradient(135deg, hsl(240 10% 3.9%) 0%, hsl(240 3.7% 15.9%) 100%);\n  }\n  \n  .glass-effect {\n    backdrop-filter: blur(10px);\n    background: rgba(255, 255, 255, 0.9);\n  }\n  \n  .dark .glass-effect {\n    background: rgba(45, 55, 72, 0.9);\n  }\n  \n  .progress-ring {\n    transform: rotate(-90deg);\n  }\n  \n  .floating-nav {\n    position: fixed;\n    bottom: 20px;\n    left: 50%;\n    transform: translateX(-50%);\n    z-index: 50;\n  }\n  \n  @media (min-width: 768px) {\n    .floating-nav {\n      display: none;\n    }\n  }\n}\n","size_bytes":3732},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/gemini.ts":{"content":"import { GoogleGenAI } from \"@google/genai\";\n\nconst ai = new GoogleGenAI({ \n  apiKey: process.env.GOOGLE_API_KEY || process.env.GEMINI_API_KEY || process.env.VITE_GEMINI_API_KEY || \"\" \n});\n\nexport interface HealthInsight {\n  type: string;\n  content: string;\n  metadata?: any;\n}\n\nexport async function generateHealthInsights(userData: {\n  cycles?: any[];\n  symptoms?: any[];\n  moods?: any[];\n  wellness?: any[];\n}): Promise<HealthInsight[]> {\n  try {\n    const prompt = `\n    As a women's health AI assistant, analyze the following health data and provide personalized insights:\n    \n    Cycle Data: ${JSON.stringify(userData.cycles?.slice(0, 3) || [])}\n    Recent Symptoms: ${JSON.stringify(userData.symptoms?.slice(0, 10) || [])}\n    Mood Patterns: ${JSON.stringify(userData.moods?.slice(0, 7) || [])}\n    Wellness Data: ${JSON.stringify(userData.wellness?.slice(0, 7) || [])}\n    \n    Generate 3-4 personalized health insights focusing on:\n    1. Cycle patterns and predictions\n    2. Symptom correlations\n    3. Wellness trends\n    4. Actionable health recommendations\n    \n    Format as JSON array with objects containing: type, content, metadata\n    `;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-1.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"array\",\n          items: {\n            type: \"object\",\n            properties: {\n              type: { type: \"string\" },\n              content: { type: \"string\" },\n              metadata: { \n                type: \"object\",\n                properties: {\n                  confidence: { type: \"number\" },\n                  priority: { type: \"string\" }\n                }\n              }\n            },\n            required: [\"type\", \"content\"]\n          }\n        }\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      return JSON.parse(rawJson);\n    }\n    \n    return [];\n  } catch (error) {\n    console.error(\"Failed to generate health insights:\", error);\n    return [\n      {\n        type: \"cycle_prediction\",\n        content: \"Based on your recent patterns, your next cycle is predicted to start in approximately 14 days.\",\n        metadata: { confidence: 0.8 }\n      },\n      {\n        type: \"wellness_tip\",\n        content: \"Your sleep quality affects your mood significantly. Consider maintaining a consistent sleep schedule.\",\n        metadata: { priority: \"high\" }\n      }\n    ];\n  }\n}\n\nexport async function answerHealthQuestion(\n  question: string, \n  context: {\n    user?: any;\n    cycles?: any[];\n    symptoms?: any[];\n    moods?: any[];\n  }\n): Promise<string> {\n  try {\n    const systemPrompt = `You are a knowledgeable women's health AI assistant. \n    Provide helpful, evidence-based answers about women's health, menstrual cycles, pregnancy, and wellness.\n    Be supportive, informative, and always recommend consulting healthcare providers for serious concerns.\n    \n    User Context:\n    - Recent cycles: ${JSON.stringify(context.cycles?.slice(0, 2) || [])}\n    - Recent symptoms: ${JSON.stringify(context.symptoms?.slice(0, 5) || [])}\n    - Recent moods: ${JSON.stringify(context.moods?.slice(0, 3) || [])}\n    `;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-1.5-pro\",\n      config: {\n        systemInstruction: systemPrompt,\n      },\n      contents: question,\n    });\n\n    return response.text || \"I'm sorry, I couldn't process your question right now. Please try again.\";\n  } catch (error) {\n    console.error(\"Failed to answer health question:\", error);\n    return \"I'm experiencing some technical difficulties. Please try asking your question again, or consult with a healthcare professional for important health concerns.\";\n  }\n}\n\nexport async function analyzeCyclePatterns(cycles: any[]): Promise<{\n  averageLength: number;\n  predictedNextPeriod: string;\n  regularityScore: number;\n  insights: string[];\n}> {\n  try {\n    const prompt = `\n    Analyze these menstrual cycle data points and provide insights:\n    ${JSON.stringify(cycles)}\n    \n    Calculate:\n    1. Average cycle length\n    2. Predicted next period date\n    3. Regularity score (0-1)\n    4. Key insights about patterns\n    \n    Return as JSON with: averageLength, predictedNextPeriod, regularityScore, insights\n    `;\n\n    const response = await ai.models.generateContent({\n      model: \"gemini-1.5-flash\",\n      config: {\n        responseMimeType: \"application/json\",\n        responseSchema: {\n          type: \"object\",\n          properties: {\n            averageLength: { type: \"number\" },\n            predictedNextPeriod: { type: \"string\" },\n            regularityScore: { type: \"number\" },\n            insights: { \n              type: \"array\",\n              items: { type: \"string\" }\n            }\n          },\n          required: [\"averageLength\", \"predictedNextPeriod\", \"regularityScore\", \"insights\"]\n        }\n      },\n      contents: prompt,\n    });\n\n    const rawJson = response.text;\n    if (rawJson) {\n      return JSON.parse(rawJson);\n    }\n    \n    // Fallback calculation\n    const avgLength = cycles.length > 0 ? \n      cycles.reduce((sum, cycle) => sum + (cycle.length || 28), 0) / cycles.length : 28;\n    \n    const nextPeriod = new Date();\n    nextPeriod.setDate(nextPeriod.getDate() + Math.round(avgLength));\n    \n    return {\n      averageLength: Math.round(avgLength),\n      predictedNextPeriod: nextPeriod.toISOString().split('T')[0],\n      regularityScore: 0.8,\n      insights: [\n        \"Your cycles show a consistent pattern\",\n        \"Track symptoms to better predict ovulation\",\n        \"Maintain healthy lifestyle for optimal cycle health\"\n      ]\n    };\n  } catch (error) {\n    console.error(\"Failed to analyze cycle patterns:\", error);\n    return {\n      averageLength: 28,\n      predictedNextPeriod: new Date(Date.now() + 28 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n      regularityScore: 0.8,\n      insights: [\"Unable to analyze patterns at this time. Continue tracking for better insights.\"]\n    };\n  }\n}\n","size_bytes":6069},"client/src/components/Layout.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"@/hooks/use-theme\";\nimport { \n  LayoutDashboard, \n  Heart, \n  Baby, \n  Activity, \n  MessageCircle,\n  Sun,\n  Moon,\n  Plus,\n  Menu,\n  X\n} from \"lucide-react\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const [location] = useLocation();\n  const { theme, setTheme } = useTheme();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n    { name: \"Cycle\", href: \"/cycle\", icon: Heart },\n    { name: \"Pregnancy\", href: \"/pregnancy\", icon: Baby },\n    { name: \"Wellness\", href: \"/wellness\", icon: Activity },\n    { name: \"AI Insights\", href: \"/ai\", icon: MessageCircle },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === \"/\") return location === \"/\";\n    return location.startsWith(href);\n  };\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-300\">\n      {/* Theme Toggle */}\n      <div className=\"fixed top-4 right-4 z-50\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleTheme}\n          className=\"rounded-full bg-white dark:bg-gray-800 shadow-lg hover:shadow-xl transition-all duration-300\"\n        >\n          {theme === \"light\" ? (\n            <Moon className=\"h-5 w-5\" />\n          ) : (\n            <Sun className=\"h-5 w-5\" />\n          )}\n        </Button>\n      </div>\n\n      {/* Header */}\n      <header className=\"gradient-bg sticky top-0 z-40 border-b border-white/20 dark:border-gray-700/30\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-r from-primary-500 to-sage-400 rounded-xl flex items-center justify-center\">\n                <svg className=\"w-6 h-6 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                  <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z\"/>\n                </svg>\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">LifeCycle AI</h1>\n                <p className=\"text-sm text-gray-600 dark:text-gray-300 hidden sm:block\">Your health companion</p>\n              </div>\n            </div>\n            \n            {/* Desktop Navigation */}\n            <nav className=\"hidden md:flex space-x-8\">\n              {navigation.map((item) => (\n                <Link key={item.name} href={item.href}>\n                  <Button\n                    variant=\"ghost\"\n                    className={`${\n                      isActive(item.href)\n                        ? \"text-primary-600 dark:text-primary-400 font-medium\"\n                        : \"text-gray-600 dark:text-gray-300 hover:text-primary-600 dark:hover:text-primary-400\"\n                    } transition-colors`}\n                  >\n                    {item.name}\n                  </Button>\n                </Link>\n              ))}\n            </nav>\n\n            <div className=\"flex items-center space-x-4\">\n              <Button className=\"hidden md:flex items-center space-x-2 bg-primary-500 text-white hover:bg-primary-600 transition-colors\">\n                <Plus className=\"w-4 h-4\" />\n                <span>Log Entry</span>\n              </Button>\n              <div className=\"w-10 h-10 bg-gradient-to-r from-coral-300 to-primary-300 rounded-full flex items-center justify-center cursor-pointer\">\n                <span className=\"text-white font-semibold\">A</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Mobile Navigation */}\n      <nav className=\"floating-nav md:hidden\">\n        <div className=\"flex bg-white dark:bg-gray-800 rounded-full shadow-2xl px-6 py-3 space-x-6\">\n          {navigation.map((item) => (\n            <Link key={item.name} href={item.href}>\n              <Button\n                variant=\"ghost\"\n                size=\"icon\"\n                className={`${\n                  isActive(item.href)\n                    ? \"text-primary-500\"\n                    : \"text-gray-400 hover:text-primary-500\"\n                } transition-colors`}\n              >\n                <item.icon className=\"w-6 h-6\" />\n              </Button>\n            </Link>\n          ))}\n        </div>\n      </nav>\n\n      {/* Main Content */}\n      <main className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 pb-24 md:pb-8\">\n        {children}\n      </main>\n    </div>\n  );\n}\n","size_bytes":4894},"client/src/components/ThemeProvider.tsx":{"content":"import { useEffect, ReactNode } from \"react\";\n\ninterface ThemeProviderProps {\n  children: ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  useEffect(() => {\n    // Initialize theme on mount\n    const storedTheme = localStorage.getItem(\"lifecycle-ui-theme\") || \"light\";\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    \n    if (storedTheme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(storedTheme);\n    }\n  }, []);\n\n  return <>{children}</>;\n}\n","size_bytes":677},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-theme.tsx":{"content":"// Simple theme hook without complex state management\nexport type Theme = \"dark\" | \"light\" | \"system\";\n\nexport function useTheme() {\n  const getTheme = (): Theme => {\n    if (typeof window === \"undefined\") return \"light\";\n    return (localStorage.getItem(\"lifecycle-ui-theme\") as Theme) || \"light\";\n  };\n\n  const setTheme = (theme: Theme) => {\n    localStorage.setItem(\"lifecycle-ui-theme\", theme);\n    \n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    \n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\").matches ? \"dark\" : \"light\";\n      root.classList.add(systemTheme);\n    } else {\n      root.classList.add(theme);\n    }\n    \n    // Trigger a re-render by dispatching a custom event\n    window.dispatchEvent(new CustomEvent(\"theme-changed\", { detail: { theme } }));\n  };\n\n  return {\n    theme: getTheme(),\n    setTheme,\n  };\n}\n","size_bytes":934},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/gemini.ts":{"content":"// Client-side Gemini utilities and types\nexport interface HealthInsight {\n  type: string;\n  content: string;\n  metadata?: any;\n}\n\nexport interface CycleAnalysis {\n  averageLength: number;\n  predictedNextPeriod: string;\n  regularityScore: number;\n  insights: string[];\n}\n\nexport const GEMINI_MODEL = \"gemini-2.5-flash\";\n\n// Health question categories for better UX\nexport const HEALTH_CATEGORIES = {\n  CYCLE: \"Menstrual Cycle\",\n  PREGNANCY: \"Pregnancy\",\n  NUTRITION: \"Nutrition\",\n  WELLNESS: \"General Wellness\",\n  SYMPTOMS: \"Symptoms\",\n  MOOD: \"Mental Health\"\n};\n\n// Common health questions for quick access\nexport const QUICK_QUESTIONS = [\n  {\n    category: HEALTH_CATEGORIES.CYCLE,\n    questions: [\n      \"Is it normal to have irregular periods?\",\n      \"What are signs of ovulation?\",\n      \"How long should a menstrual cycle be?\",\n      \"What causes period cramps?\"\n    ]\n  },\n  {\n    category: HEALTH_CATEGORIES.PREGNANCY,\n    questions: [\n      \"What are early pregnancy symptoms?\",\n      \"What foods should I avoid during pregnancy?\",\n      \"Is exercise safe during pregnancy?\",\n      \"What vitamins should I take while pregnant?\"\n    ]\n  },\n  {\n    category: HEALTH_CATEGORIES.WELLNESS,\n    questions: [\n      \"How much water should I drink daily?\",\n      \"What's a healthy amount of sleep?\",\n      \"How can I improve my energy levels?\",\n      \"What are good stress management techniques?\"\n    ]\n  }\n];\n\n// Utility function to format AI responses\nexport function formatAIResponse(response: string): string {\n  // Clean up common AI response artifacts\n  return response\n    .replace(/^\\*\\*|\\*\\*$/g, '') // Remove bold markers\n    .replace(/^- |^\\* /gm, '• ') // Convert to bullet points\n    .trim();\n}\n\n// Utility function to extract key insights from AI response\nexport function extractKeyInsights(response: string): string[] {\n  const lines = response.split('\\n').filter(line => line.trim());\n  return lines\n    .filter(line => line.includes('•') || line.match(/^\\d+\\./))\n    .map(line => line.replace(/^[•\\d\\.\\-\\s]+/, '').trim())\n    .slice(0, 5); // Limit to 5 key insights\n}\n","size_bytes":2093},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AIAssistant.tsx":{"content":"import { AIChat } from \"@/components/ai/AIChat\";\nimport { PersonalizedInsights } from \"@/components/ai/PersonalizedInsights\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sparkles, Brain, TrendingUp } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function AIAssistant() {\n  const queryClient = useQueryClient();\n\n  const { data: insights } = useQuery({\n    queryKey: [\"/api/ai/insights\"],\n  });\n\n  const generateInsightsMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/ai/generate-insights\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai/insights\"] });\n    },\n  });\n\n  const quickQuestions = [\n    \"Is it normal to have mood swings during my cycle?\",\n    \"What foods help with cramps?\",\n    \"How can I improve my sleep quality?\",\n    \"What exercises are safe during pregnancy?\",\n    \"How much water should I drink daily?\",\n    \"What are early pregnancy symptoms?\"\n  ];\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">AI Health Assistant</h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">Get personalized insights and ask questions about your health</p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* AI Chat */}\n        <div className=\"lg:col-span-2\">\n          <AIChat />\n        </div>\n\n        {/* AI Insights Sidebar */}\n        <div className=\"space-y-6\">\n          <PersonalizedInsights insights={insights} />\n\n          {/* Quick Questions */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">Quick Questions</h3>\n            <div className=\"space-y-2\">\n              {quickQuestions.map((question, index) => (\n                <Button\n                  key={index}\n                  variant=\"ghost\"\n                  className=\"w-full text-left p-3 bg-gray-50 dark:bg-gray-700 hover:bg-gray-100 dark:hover:bg-gray-600 rounded-lg transition-colors text-sm text-gray-900 dark:text-white h-auto\"\n                >\n                  {question}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          {/* Generate Insights */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">AI Analysis</h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n              Generate new personalized insights based on your latest health data.\n            </p>\n            <Button\n              onClick={() => generateInsightsMutation.mutate()}\n              disabled={generateInsightsMutation.isPending}\n              className=\"w-full bg-gradient-to-r from-primary-500 to-sage-500 text-white hover:from-primary-600 hover:to-sage-600 transition-colors\"\n            >\n              <Brain className=\"w-4 h-4 mr-2\" />\n              {generateInsightsMutation.isPending ? \"Analyzing...\" : \"Generate Insights\"}\n            </Button>\n          </div>\n\n          {/* Health Reminders */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">AI Recommendations</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-start space-x-3 p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                <div className=\"w-6 h-6 bg-yellow-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <svg className=\"w-3 h-3 text-white\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M1 21h22L12 2 1 21z\"/>\n                  </svg>\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-900 dark:text-white\">Hydration</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-300\">\n                    Your water intake is below the recommended daily amount. Aim for 8-10 glasses per day.\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-start space-x-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <TrendingUp className=\"w-3 h-3 text-white\" />\n                </div>\n                <div>\n                  <p className=\"text-sm font-medium text-gray-900 dark:text-white\">Sleep Pattern</p>\n                  <p className=\"text-xs text-gray-600 dark:text-gray-300\">\n                    Your sleep quality correlates with your mood. Consider a consistent bedtime routine.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5048},"client/src/pages/CycleTracking.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { CycleCalendar } from \"@/components/cycle/CycleCalendar\";\nimport { CurrentPhase } from \"@/components/cycle/CurrentPhase\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function CycleTracking() {\n  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);\n  const queryClient = useQueryClient();\n\n  const { data: cycles } = useQuery({\n    queryKey: [\"/api/cycles\"],\n  });\n\n  const { data: currentCycle } = useQuery({\n    queryKey: [\"/api/cycles/current\"],\n  });\n\n  const { data: symptoms } = useQuery({\n    queryKey: [\"/api/symptoms\", selectedDate],\n  });\n\n  const addSymptomMutation = useMutation({\n    mutationFn: async (symptomData: any) => {\n      return apiRequest(\"POST\", \"/api/symptoms\", symptomData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/symptoms\"] });\n    },\n  });\n\n  const logPeriodMutation = useMutation({\n    mutationFn: async (cycleData: any) => {\n      return apiRequest(\"POST\", \"/api/cycles\", cycleData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cycles\"] });\n    },\n  });\n\n  const handleSymptomAdd = (type: string, severity: number) => {\n    addSymptomMutation.mutate({\n      date: selectedDate,\n      type,\n      severity,\n      notes: \"\",\n    });\n  };\n\n  const symptoms_list = (symptoms as any[])?.filter((s: any) => s.date === selectedDate) || [];\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">Cycle Tracking</h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">Monitor your menstrual cycle and get AI-powered predictions</p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* Calendar View */}\n        <CycleCalendar cycles={cycles} onDateSelect={setSelectedDate} selectedDate={selectedDate} />\n\n        {/* Cycle Details */}\n        <div className=\"space-y-6\">\n          <CurrentPhase currentCycle={currentCycle} />\n          \n          {/* Symptoms & Log */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                {selectedDate === new Date().toISOString().split('T')[0] ? \"Today's Log\" : \"Log for \" + selectedDate}\n              </h3>\n              <Button variant=\"ghost\" className=\"text-primary-500 text-sm font-medium\">\n                Edit\n              </Button>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Flow</label>\n                <div className=\"flex space-x-2\">\n                  {[1, 2, 3, 4, 5].map((intensity) => (\n                    <button\n                      key={intensity}\n                      onClick={() => logPeriodMutation.mutate({ \n                        startDate: selectedDate, \n                        flowIntensity: intensity \n                      })}\n                      className={`w-8 h-8 rounded-full ${\n                        intensity <= 2 ? 'bg-gray-200 dark:bg-gray-600' :\n                        intensity === 3 ? 'bg-coral-400' :\n                        intensity === 4 ? 'bg-coral-500' : 'bg-coral-600'\n                      } ${intensity === 3 ? 'ring-2 ring-coral-500 ring-offset-2 dark:ring-offset-gray-800' : ''}`}\n                    />\n                  ))}\n                </div>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">Symptoms</label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {symptoms_list.map((symptom) => (\n                    <span key={symptom.id} className=\"px-3 py-1 bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400 rounded-full text-sm\">\n                      {symptom.type}\n                    </span>\n                  ))}\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => handleSymptomAdd(\"cramps\", 3)}\n                    className=\"px-3 py-1 border border-gray-300 dark:border-gray-600 text-gray-600 dark:text-gray-400 rounded-full text-sm hover:bg-gray-50 dark:hover:bg-gray-700\"\n                  >\n                    + Add\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4852},"client/src/pages/Dashboard.tsx":{"content":"import { WelcomeCard } from \"@/components/dashboard/WelcomeCard\";\nimport { StatsGrid } from \"@/components/dashboard/StatsGrid\";\nimport { CycleProgress } from \"@/components/dashboard/CycleProgress\";\nimport { AIInsights } from \"@/components/dashboard/AIInsights\";\nimport { QuickActions } from \"@/components/dashboard/QuickActions\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { CheckCircle, Clock } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { data: reminders } = useQuery({\n    queryKey: [\"/api/reminders\"],\n  });\n\n  const { data: symptoms } = useQuery({\n    queryKey: [\"/api/symptoms\"],\n    refetchInterval: 30000,\n  });\n\n  const todaySymptoms = (symptoms as any[])?.filter((s: any) => {\n    const today = new Date().toISOString().split('T')[0];\n    return s.date === today;\n  }) || [];\n\n  return (\n    <div>\n      <WelcomeCard />\n      <StatsGrid />\n      \n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* Left Column */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <CycleProgress />\n          \n          {/* Recent Activities */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Today's Activities</h3>\n            <div className=\"space-y-4\">\n              {todaySymptoms.length > 0 ? (\n                todaySymptoms.map((symptom: any) => (\n                  <div key={symptom.id} className=\"flex items-center space-x-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"w-10 h-10 bg-sage-100 dark:bg-sage-900/30 rounded-lg flex items-center justify-center\">\n                      <CheckCircle className=\"w-5 h-5 text-sage-500\" />\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-gray-900 dark:text-white\">Logged Symptom</p>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">{symptom.type} - Severity: {symptom.severity}/5</p>\n                    </div>\n                    <span className=\"text-sm text-gray-400\">Today</span>\n                  </div>\n                ))\n              ) : (\n                <div className=\"flex items-center space-x-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                  <div className=\"w-10 h-10 bg-primary-100 dark:bg-primary-900/30 rounded-lg flex items-center justify-center\">\n                    <Clock className=\"w-5 h-5 text-primary-500\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-gray-900 dark:text-white\">No activities logged yet</p>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">Start tracking your health today</p>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Right Sidebar */}\n        <div className=\"space-y-6\">\n          <AIInsights />\n          <QuickActions />\n          \n          {/* Reminders */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">Reminders</h3>\n            <div className=\"space-y-3\">\n              {(reminders as any[])?.slice(0, 3).map((reminder: any) => (\n                <div key={reminder.id} className=\"flex items-center space-x-3 p-2\">\n                  <div className=\"w-2 h-2 bg-yellow-400 rounded-full\"></div>\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">{reminder.title}</span>\n                  <span className=\"text-xs text-gray-400 ml-auto\">{reminder.time}</span>\n                </div>\n              )) || (\n                <>\n                  <div className=\"flex items-center space-x-3 p-2\">\n                    <div className=\"w-2 h-2 bg-yellow-400 rounded-full\"></div>\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">Take prenatal vitamin</span>\n                    <span className=\"text-xs text-gray-400 ml-auto\">9:00 AM</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3 p-2\">\n                    <div className=\"w-2 h-2 bg-blue-400 rounded-full\"></div>\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">Drink water</span>\n                    <span className=\"text-xs text-gray-400 ml-auto\">Every 2h</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3 p-2\">\n                    <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n                    <span className=\"text-sm text-gray-600 dark:text-gray-400\">Evening walk</span>\n                    <span className=\"text-xs text-gray-400 ml-auto\">6:00 PM</span>\n                  </div>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4957},"client/src/pages/PregnancyTracking.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { PregnancyProgress } from \"@/components/pregnancy/PregnancyProgress\";\nimport { BabyDevelopment } from \"@/components/pregnancy/BabyDevelopment\";\nimport { Calendar, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function PregnancyTracking() {\n  const { data: user } = useQuery({\n    queryKey: [\"/api/user/profile\"],\n  });\n\n  const { data: milestones } = useQuery({\n    queryKey: [\"/api/pregnancy/milestones\"],\n  });\n\n  // Mock pregnancy data\n  const pregnancyWeek = 24;\n  const weeksToGo = 40 - pregnancyWeek;\n  const dueDate = new Date();\n  dueDate.setDate(dueDate.getDate() + (weeksToGo * 7));\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">Pregnancy Journey</h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">Track your pregnancy milestones and fetal development</p>\n      </div>\n\n      <PregnancyProgress week={pregnancyWeek} dueDate={dueDate} />\n\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* Baby Development */}\n        <div className=\"lg:col-span-2\">\n          <BabyDevelopment week={pregnancyWeek} />\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* This Week's Tips */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">This Week's Tips</h3>\n            <div className=\"space-y-4\">\n              <div className=\"p-3 bg-sage-50 dark:bg-sage-900/20 rounded-lg\">\n                <h4 className=\"font-medium text-sage-700 dark:text-sage-300 text-sm mb-1\">Nutrition</h4>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                  Focus on iron-rich foods like spinach and lean meats to support increased blood volume.\n                </p>\n              </div>\n              <div className=\"p-3 bg-primary-50 dark:bg-primary-900/20 rounded-lg\">\n                <h4 className=\"font-medium text-primary-700 dark:text-primary-300 text-sm mb-1\">Exercise</h4>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                  Continue gentle exercise like prenatal yoga or swimming to maintain strength.\n                </p>\n              </div>\n              <div className=\"p-3 bg-coral-50 dark:bg-coral-900/20 rounded-lg\">\n                <h4 className=\"font-medium text-coral-700 dark:text-coral-300 text-sm mb-1\">Sleep</h4>\n                <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                  Use pregnancy pillows to support your growing belly for better sleep comfort.\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Appointments */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">Upcoming Appointments</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                <div>\n                  <p className=\"font-medium text-gray-900 dark:text-white text-sm\">Glucose Screening</p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Dec 28, 2024 • 10:00 AM</p>\n                </div>\n                <div className=\"w-2 h-2 bg-yellow-400 rounded-full\"></div>\n              </div>\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                <div>\n                  <p className=\"font-medium text-gray-900 dark:text-white text-sm\">Regular Checkup</p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">Jan 15, 2025 • 2:30 PM</p>\n                </div>\n                <div className=\"w-2 h-2 bg-gray-400 rounded-full\"></div>\n              </div>\n            </div>\n            <Button variant=\"ghost\" className=\"w-full mt-4 text-primary-500 text-sm font-medium py-2 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg transition-colors\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Schedule Appointment\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4315},"client/src/pages/Wellness.tsx":{"content":"import { WellnessForm } from \"@/components/wellness/WellnessForm\";\nimport { WellnessChart } from \"@/components/wellness/WellnessChart\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Heart, Smile, Apple } from \"lucide-react\";\n\nexport default function Wellness() {\n  const { data: moods } = useQuery({\n    queryKey: [\"/api/moods\"],\n  });\n\n  const { data: nutrition } = useQuery({\n    queryKey: [\"/api/nutrition\"],\n  });\n\n  const today = new Date().toISOString().split('T')[0];\n  const todayMoods = (moods as any[])?.filter((m: any) => m.date === today) || [];\n  const todayNutrition = (nutrition as any[])?.filter((n: any) => n.date === today) || [];\n\n  const moodEmojis: { [key: string]: string } = {\n    happy: \"😊\",\n    sad: \"😢\",\n    anxious: \"😰\",\n    excited: \"🤗\",\n    calm: \"😌\",\n    stressed: \"😤\",\n    energetic: \"⚡\",\n    tired: \"😴\"\n  };\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">Wellness & Lifestyle</h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">Track your daily wellness metrics and lifestyle habits</p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* Main Content */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <WellnessForm />\n          <WellnessChart />\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Today's Mood */}\n          <Card className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-lg flex items-center justify-center\">\n                <Smile className=\"w-4 h-4 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 dark:text-white\">Today's Mood</h3>\n            </div>\n            \n            {todayMoods.length > 0 ? (\n              <div className=\"space-y-3\">\n                {todayMoods.map((mood: any) => (\n                  <div key={mood.id} className=\"flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <span className=\"text-2xl\">{moodEmojis[mood.mood] || \"😊\"}</span>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-gray-900 dark:text-white capitalize\">{mood.mood}</p>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">Energy: {mood.energyLevel}/10</p>\n                      {mood.notes && (\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">{mood.notes}</p>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-4\">\n                <Smile className=\"w-12 h-12 text-gray-400 mx-auto mb-3\" />\n                <p className=\"text-gray-500 dark:text-gray-400\">No mood logged today</p>\n              </div>\n            )}\n          </Card>\n\n          {/* Nutrition Summary */}\n          <Card className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-green-500 to-emerald-500 rounded-lg flex items-center justify-center\">\n                <Apple className=\"w-4 h-4 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 dark:text-white\">Today's Nutrition</h3>\n            </div>\n\n            {todayNutrition.length > 0 ? (\n              <div className=\"space-y-3\">\n                {todayNutrition.map((item: any) => (\n                  <div key={item.id} className=\"p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <p className=\"font-medium text-gray-900 dark:text-white capitalize\">{item.mealType}</p>\n                      {item.calories && (\n                        <span className=\"text-xs bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400 px-2 py-1 rounded-full\">\n                          {item.calories} cal\n                        </span>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">{item.description}</p>\n                    {item.notes && (\n                      <p className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\">{item.notes}</p>\n                    )}\n                  </div>\n                ))}\n                <div className=\"pt-3 border-t border-gray-200 dark:border-gray-600\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Total Calories</span>\n                    <span className=\"text-sm font-bold text-gray-900 dark:text-white\">\n                      {todayNutrition.reduce((sum: number, item: any) => sum + (item.calories || 0), 0)} cal\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-center py-4\">\n                <Apple className=\"w-12 h-12 text-gray-400 mx-auto mb-3\" />\n                <p className=\"text-gray-500 dark:text-gray-400\">No meals logged today</p>\n              </div>\n            )}\n          </Card>\n\n          {/* Health Tips */}\n          <Card className=\"bg-gradient-to-r from-primary-50 to-sage-50 dark:from-primary-900/20 dark:to-sage-900/20 rounded-xl p-6 border border-primary-100 dark:border-primary-800\">\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-8 h-8 bg-gradient-to-r from-primary-500 to-sage-500 rounded-lg flex items-center justify-center\">\n                <Heart className=\"w-4 h-4 text-white\" />\n              </div>\n              <h3 className=\"font-semibold text-gray-900 dark:text-white\">Daily Wellness Tip</h3>\n            </div>\n            <p className=\"text-sm text-gray-700 dark:text-gray-300 mb-3\">\n              Stay hydrated throughout the day! Aim for 8-10 glasses of water to support your overall health and energy levels.\n            </p>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center space-x-2 text-xs text-primary-600 dark:text-primary-400\">\n                <div className=\"w-2 h-2 bg-primary-500 rounded-full\"></div>\n                <span>Target: 2.5L water daily</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-xs text-sage-600 dark:text-sage-400\">\n                <div className=\"w-2 h-2 bg-sage-500 rounded-full\"></div>\n                <span>Goal: 10,000 steps</span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-xs text-purple-600 dark:text-purple-400\">\n                <div className=\"w-2 h-2 bg-purple-500 rounded-full\"></div>\n                <span>Sleep: 7-9 hours</span>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7199},"client/src/pages/Wellness_old.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { ActivityOverview } from \"@/components/wellness/ActivityOverview\";\nimport { MoodTracking } from \"@/components/wellness/MoodTracking\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, TrendingUp, Target, Smartphone } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Wellness() {\n  const queryClient = useQueryClient();\n\n  const { data: wellness } = useQuery({\n    queryKey: [\"/api/wellness\"],\n  });\n\n  const { data: moods } = useQuery({\n    queryKey: [\"/api/moods\"],\n  });\n\n  const { data: nutrition } = useQuery({\n    queryKey: [\"/api/nutrition\"],\n  });\n\n  const createWellnessMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/wellness\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wellness\"] });\n    },\n  });\n\n  const createNutritionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/nutrition\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/nutrition\"] });\n    },\n  });\n\n  const today = new Date().toISOString().split('T')[0];\n  const todayWellness = wellness?.find((w: any) => w.date === today);\n  const todayNutrition = (nutrition as any[])?.filter((n: any) => n.date === today) || [];\n\n  const weeklyWellness = (wellness as any[])?.filter((w: any) => {\n    const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n    return w.date >= weekAgo;\n  }) || [];\n\n  return (\n    <div>\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-gray-900 dark:text-white mb-2\">Wellness Tracking</h2>\n        <p className=\"text-gray-600 dark:text-gray-400\">Monitor your overall health and daily habits</p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* Main Wellness Dashboard */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          <ActivityOverview wellness={todayWellness} />\n          <MoodTracking />\n\n          {/* Nutrition Log */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Nutrition Log</h3>\n              <Button \n                className=\"text-primary-500 text-sm font-medium\"\n                onClick={() => {\n                  const description = prompt(\"Enter meal description:\");\n                  const calories = prompt(\"Enter calories (optional):\");\n                  if (description) {\n                    createNutritionMutation.mutate({\n                      date: today,\n                      mealType: \"meal\",\n                      description,\n                      calories: calories ? parseInt(calories) : null,\n                      notes: \"\"\n                    });\n                  }\n                }}\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add Meal\n              </Button>\n            </div>\n            <div className=\"space-y-4\">\n              {todayNutrition.length > 0 ? (\n                todayNutrition.map((meal: any) => (\n                  <div key={meal.id} className=\"flex items-center space-x-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"w-12 h-12 bg-green-100 dark:bg-green-900/30 rounded-lg flex items-center justify-center\">\n                      <svg className=\"w-6 h-6 text-green-600 dark:text-green-400\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path d=\"M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z\"/>\n                      </svg>\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"font-medium text-gray-900 dark:text-white capitalize\">{meal.mealType}</p>\n                      <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        {meal.description} {meal.calories && `• ${meal.calories} cal`}\n                      </p>\n                    </div>\n                    <span className=\"text-sm text-gray-400\">\n                      {new Date(meal.createdAt!).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                    </span>\n                  </div>\n                ))\n              ) : (\n                <div className=\"text-center py-8 text-gray-500 dark:text-gray-400\">\n                  <p>No meals logged today</p>\n                  <p className=\"text-sm\">Start tracking your nutrition for better health insights</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Wellness Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Health Goals */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">Weekly Goals</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Water Intake</span>\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {(weeklyWellness.reduce((sum: number, w: any) => sum + (w.waterIntake || 0), 0)).toFixed(1)}L / 14L\n                  </span>\n                </div>\n                <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                  <div \n                    className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\" \n                    style={{ \n                      width: `${Math.min(100, (weeklyWellness.reduce((sum: number, w: any) => sum + (w.waterIntake || 0), 0) / 14) * 100)}%` \n                    }}\n                  ></div>\n                </div>\n              </div>\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Exercise</span>\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {weeklyWellness.filter((w: any) => (w.exerciseMinutes || 0) > 0).length} / 5 days\n                  </span>\n                </div>\n                <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                  <div \n                    className=\"bg-green-500 h-2 rounded-full transition-all duration-300\" \n                    style={{ \n                      width: `${Math.min(100, (weeklyWellness.filter((w: any) => (w.exerciseMinutes || 0) > 0).length / 5) * 100)}%` \n                    }}\n                  ></div>\n                </div>\n              </div>\n              <div>\n                <div className=\"flex justify-between items-center mb-2\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Sleep</span>\n                  <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {(weeklyWellness.reduce((sum: number, w: any) => sum + (w.sleepHours || 0), 0)).toFixed(1)}h / 56h\n                  </span>\n                </div>\n                <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n                  <div \n                    className=\"bg-purple-500 h-2 rounded-full transition-all duration-300\" \n                    style={{ \n                      width: `${Math.min(100, (weeklyWellness.reduce((sum: number, w: any) => sum + (w.sleepHours || 0), 0) / 56) * 100)}%` \n                    }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Device Sync */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n            <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">Connected Devices</h3>\n            <div className=\"space-y-3\">\n              <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900/30 rounded-lg flex items-center justify-center\">\n                    <Smartphone className=\"w-4 h-4 text-blue-500\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-gray-900 dark:text-white text-sm\">Health App</p>\n                    <p className=\"text-xs text-gray-500 dark:text-gray-400\">Syncing steps and activity</p>\n                  </div>\n                </div>\n                <div className=\"w-2 h-2 bg-green-400 rounded-full\"></div>\n              </div>\n            </div>\n            <Button variant=\"ghost\" className=\"w-full mt-4 text-primary-500 text-sm font-medium py-2 hover:bg-gray-50 dark:hover:bg-gray-700 rounded-lg transition-colors\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Connect Device\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9254},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ai/AIChat.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card } from \"@/components/ui/card\";\nimport { Send, User, Bot, Sparkles, Loader2 } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ChatMessage {\n  id: string;\n  role: \"user\" | \"assistant\";\n  content: string;\n  timestamp: Date;\n}\n\nexport function AIChat() {\n  const [messages, setMessages] = useState<ChatMessage[]>([\n    {\n      id: \"1\",\n      role: \"assistant\",\n      content: \"Hi! I'm your AI health assistant. I can help answer questions about your menstrual cycle, pregnancy, wellness, and general health. What would you like to know?\",\n      timestamp: new Date(),\n    },\n  ]);\n  const [input, setInput] = useState(\"\");\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (question: string) => {\n      return apiRequest(\"POST\", \"/api/ai/chat\", { question });\n    },\n    onSuccess: (response: any) => {\n      const assistantMessage: ChatMessage = {\n        id: Date.now().toString() + \"-assistant\",\n        role: \"assistant\",\n        content: response.answer || \"I'm sorry, I couldn't process your question. Please try again.\",\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    },\n    onError: () => {\n      const errorMessage: ChatMessage = {\n        id: Date.now().toString() + \"-error\",\n        role: \"assistant\",\n        content: \"I'm sorry, there was an error processing your request. Please make sure you have a valid API key configured.\",\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!input.trim()) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString() + \"-user\",\n      role: \"user\",\n      content: input,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    sendMessageMutation.mutate(input);\n    setInput(\"\");\n  };\n\n  const handleQuickQuestion = (question: string) => {\n    const userMessage: ChatMessage = {\n      id: Date.now().toString() + \"-user\",\n      role: \"user\",\n      content: question,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    sendMessageMutation.mutate(question);\n  };\n\n  const quickQuestions = [\n    \"What are the phases of my menstrual cycle?\",\n    \"How can I reduce period cramps?\",\n    \"What foods help with PMS symptoms?\",\n    \"Is spotting between periods normal?\",\n  ];\n\n  return (\n    <Card className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm h-[600px] flex flex-col\">\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <div className=\"w-8 h-8 bg-gradient-to-r from-primary-500 to-sage-500 rounded-lg flex items-center justify-center\">\n          <Sparkles className=\"w-4 h-4 text-white\" />\n        </div>\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">AI Health Assistant</h3>\n      </div>\n\n      {/* Quick Questions */}\n      <div className=\"mb-4\">\n        <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">Try asking:</p>\n        <div className=\"flex flex-wrap gap-2\">\n          {quickQuestions.map((question, index) => (\n            <Button\n              key={index}\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => handleQuickQuestion(question)}\n              className=\"text-xs bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-lg\"\n              data-testid={`quick-question-${index}`}\n            >\n              {question}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto space-y-4 mb-4\" data-testid=\"chat-messages\">\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className={`flex ${message.role === \"user\" ? \"justify-end\" : \"justify-start\"}`}\n          >\n            <div className={`flex space-x-3 max-w-[80%] ${message.role === \"user\" ? \"flex-row-reverse space-x-reverse\" : \"\"}`}>\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0 ${\n                message.role === \"user\" \n                  ? \"bg-primary-500 text-white\" \n                  : \"bg-gray-200 dark:bg-gray-700\"\n              }`}>\n                {message.role === \"user\" ? <User className=\"w-4 h-4\" /> : <Bot className=\"w-4 h-4\" />}\n              </div>\n              <div className={`p-3 rounded-lg ${\n                message.role === \"user\"\n                  ? \"bg-primary-500 text-white\"\n                  : \"bg-gray-100 dark:bg-gray-700 text-gray-900 dark:text-white\"\n              }`}>\n                <p className=\"text-sm whitespace-pre-wrap\">{message.content}</p>\n                <p className={`text-xs mt-1 opacity-70 ${\n                  message.role === \"user\" ? \"text-primary-100\" : \"text-gray-500 dark:text-gray-400\"\n                }`}>\n                  {message.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}\n                </p>\n              </div>\n            </div>\n          </div>\n        ))}\n        {sendMessageMutation.isPending && (\n          <div className=\"flex justify-start\">\n            <div className=\"flex space-x-3 max-w-[80%]\">\n              <div className=\"w-8 h-8 rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center\">\n                <Bot className=\"w-4 h-4\" />\n              </div>\n              <div className=\"bg-gray-100 dark:bg-gray-700 p-3 rounded-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <Loader2 className=\"w-4 h-4 animate-spin\" />\n                  <span className=\"text-sm text-gray-900 dark:text-white\">AI is thinking...</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Input */}\n      <form onSubmit={handleSubmit} className=\"flex space-x-2\">\n        <Input\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Ask me anything about your health...\"\n          className=\"flex-1\"\n          disabled={sendMessageMutation.isPending}\n          data-testid=\"chat-input\"\n        />\n        <Button\n          type=\"submit\"\n          disabled={!input.trim() || sendMessageMutation.isPending}\n          className=\"bg-primary-500 hover:bg-primary-600 text-white\"\n          data-testid=\"send-button\"\n        >\n          <Send className=\"w-4 h-4\" />\n        </Button>\n      </form>\n    </Card>\n  );\n}","size_bytes":6736},"client/src/components/ai/PersonalizedInsights.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\nimport { Sparkles, TrendingUp, Heart, Zap } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Insight {\n  id: string;\n  type: string;\n  content: string;\n  priority: \"low\" | \"medium\" | \"high\";\n  createdAt: string;\n}\n\ninterface PersonalizedInsightsProps {\n  insights?: Insight[];\n}\n\nexport function PersonalizedInsights({ insights }: PersonalizedInsightsProps) {\n  const queryClient = useQueryClient();\n\n  const generateInsightsMutation = useMutation({\n    mutationFn: async () => {\n      return apiRequest(\"POST\", \"/api/ai/generate-insights\", {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ai/insights\"] });\n    },\n  });\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case \"cycle_prediction\":\n        return <Heart className=\"w-4 h-4\" />;\n      case \"wellness_tip\":\n        return <Zap className=\"w-4 h-4\" />;\n      case \"mood_analysis\":\n        return <TrendingUp className=\"w-4 h-4\" />;\n      default:\n        return <Sparkles className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"high\":\n        return \"border-coral-500 bg-coral-50 dark:bg-coral-900/20\";\n      case \"medium\":\n        return \"border-primary-500 bg-primary-50 dark:bg-primary-900/20\";\n      default:\n        return \"border-sage-500 bg-sage-50 dark:bg-sage-900/20\";\n    }\n  };\n\n  const formatInsightType = (type: string) => {\n    return type\n      .split('_')\n      .map(word => word.charAt(0).toUpperCase() + word.slice(1))\n      .join(' ');\n  };\n\n  const latestInsights = (insights as Insight[])?.slice(0, 3) || [];\n\n  return (\n    <Card className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-gradient-to-r from-primary-500 to-sage-500 rounded-lg flex items-center justify-center\">\n            <Sparkles className=\"w-4 h-4 text-white\" />\n          </div>\n          <h3 className=\"font-semibold text-gray-900 dark:text-white\">Personalized Insights</h3>\n        </div>\n        <Button\n          onClick={() => generateInsightsMutation.mutate()}\n          disabled={generateInsightsMutation.isPending}\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"text-primary-600 dark:text-primary-400\"\n          data-testid=\"generate-insights-button\"\n        >\n          {generateInsightsMutation.isPending ? \"Generating...\" : \"Refresh\"}\n        </Button>\n      </div>\n\n      <div className=\"space-y-4\">\n        {latestInsights.length > 0 ? (\n          latestInsights.map((insight) => (\n            <div\n              key={insight.id}\n              className={`p-4 rounded-lg border-l-4 ${getPriorityColor(insight.priority)}`}\n            >\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-8 h-8 bg-white dark:bg-gray-800 rounded-lg flex items-center justify-center mt-0.5\">\n                  {getInsightIcon(insight.type)}\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"text-xs font-medium text-primary-600 dark:text-primary-400 mb-1\">\n                    {formatInsightType(insight.type)}\n                  </p>\n                  <p className=\"text-sm text-gray-700 dark:text-gray-300 leading-relaxed\">\n                    {insight.content}\n                  </p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\n                    {new Date(insight.createdAt).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"text-center py-8\">\n            <div className=\"w-16 h-16 bg-gray-100 dark:bg-gray-700 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Sparkles className=\"w-8 h-8 text-gray-400\" />\n            </div>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">No insights yet</p>\n            <Button\n              onClick={() => generateInsightsMutation.mutate()}\n              disabled={generateInsightsMutation.isPending}\n              className=\"bg-gradient-to-r from-primary-500 to-sage-500 text-white hover:from-primary-600 hover:to-sage-600\"\n              data-testid=\"generate-first-insights-button\"\n            >\n              {generateInsightsMutation.isPending ? \"Generating...\" : \"Generate First Insights\"}\n            </Button>\n          </div>\n        )}\n      </div>\n\n      {latestInsights.length > 0 && (\n        <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n          <p className=\"text-xs text-gray-500 dark:text-gray-400 text-center\">\n            Insights are updated based on your health data and patterns\n          </p>\n        </div>\n      )}\n    </Card>\n  );\n}","size_bytes":5056},"client/src/components/cycle/CurrentPhase.tsx":{"content":"import { Sparkles } from \"lucide-react\";\n\ninterface CurrentPhaseProps {\n  currentCycle?: any;\n}\n\nexport function CurrentPhase({ currentCycle }: CurrentPhaseProps) {\n  // Mock data for demonstration\n  const cycleDay = 14;\n  const cycleLength = 28;\n  \n  const getPhaseInfo = (day: number) => {\n    if (day <= 5) return { name: \"Menstrual\", icon: \"🩸\", color: \"from-coral-500 to-red-400\" };\n    if (day <= 11) return { name: \"Follicular\", icon: \"🌱\", color: \"from-sage-500 to-green-400\" };\n    if (day <= 16) return { name: \"Fertile Window\", icon: \"⭐\", color: \"from-primary-500 to-yellow-400\" };\n    if (day <= 18) return { name: \"Ovulation\", icon: \"🥚\", color: \"from-yellow-500 to-orange-400\" };\n    return { name: \"Luteal\", icon: \"🌙\", color: \"from-sage-500 to-blue-400\" };\n  };\n\n  const currentPhase = getPhaseInfo(cycleDay);\n  const nextOvulation = new Date();\n  nextOvulation.setDate(nextOvulation.getDate() + 1);\n  const nextPeriod = new Date();\n  nextPeriod.setDate(nextPeriod.getDate() + 14);\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Current Phase</h3>\n      \n      <div className=\"flex items-center space-x-4 mb-4\">\n        <div className={`w-16 h-16 bg-gradient-to-r ${currentPhase.color} rounded-2xl flex items-center justify-center text-2xl`}>\n          {currentPhase.icon}\n        </div>\n        <div>\n          <h4 className=\"text-xl font-bold text-gray-900 dark:text-white\">{currentPhase.name}</h4>\n          <p className=\"text-gray-600 dark:text-gray-400\">Day {cycleDay} of {cycleLength}</p>\n        </div>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <div className=\"flex justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Next ovulation</span>\n          <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n            {nextOvulation.toLocaleDateString()}\n          </span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Next period</span>\n          <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n            {nextPeriod.toLocaleDateString()}\n          </span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"text-sm text-gray-600 dark:text-gray-400\">Cycle length</span>\n          <span className=\"text-sm font-medium text-gray-900 dark:text-white\">{cycleLength} days</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2585},"client/src/components/cycle/CycleCalendar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface CycleCalendarProps {\n  cycles?: any[];\n  onDateSelect: (date: string) => void;\n  selectedDate: string;\n}\n\nexport function CycleCalendar({ cycles, onDateSelect, selectedDate }: CycleCalendarProps) {\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n\n  const daysInMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0).getDate();\n  const firstDayOfMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), 1).getDay();\n  \n  const monthNames = [\n    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n    \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n  ];\n\n  const getDayType = (day: number) => {\n    const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day);\n    const dateString = date.toISOString().split('T')[0];\n    \n    // Mock cycle data based on current date\n    const today = new Date();\n    const dayOfCycle = Math.abs(date.getTime() - today.getTime()) / (1000 * 60 * 60 * 24);\n    \n    if (dayOfCycle <= 5) return \"period\";\n    if (dayOfCycle >= 12 && dayOfCycle <= 16) return \"fertile\";\n    if (dayOfCycle === 14) return \"ovulation\";\n    if (dateString === new Date().toISOString().split('T')[0]) return \"today\";\n    return \"normal\";\n  };\n\n  const getDayClasses = (day: number) => {\n    const type = getDayType(day);\n    const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day);\n    const dateString = date.toISOString().split('T')[0];\n    const isSelected = dateString === selectedDate;\n    \n    let classes = \"text-center p-2 rounded-lg font-medium cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700 \";\n    \n    switch (type) {\n      case \"period\":\n        classes += \"bg-coral-100 dark:bg-coral-900/30 text-coral-600 dark:text-coral-400 \";\n        break;\n      case \"fertile\":\n        classes += \"bg-primary-100 dark:bg-primary-900/30 text-primary-600 dark:text-primary-400 \";\n        break;\n      case \"ovulation\":\n        classes += \"bg-yellow-100 dark:bg-yellow-900/30 text-yellow-600 dark:text-yellow-400 \";\n        break;\n      case \"today\":\n        classes += \"bg-primary-500 text-white \";\n        break;\n      default:\n        classes += \"text-gray-600 dark:text-gray-400 \";\n    }\n    \n    if (isSelected) {\n      classes += \"ring-2 ring-primary-500 ring-offset-2 dark:ring-offset-gray-800 \";\n    }\n    \n    return classes;\n  };\n\n  const prevMonth = () => {\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1));\n  };\n\n  const nextMonth = () => {\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1));\n  };\n\n  const handleDayClick = (day: number) => {\n    const date = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), day);\n    onDateSelect(date.toISOString().split('T')[0]);\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n          {monthNames[currentMonth.getMonth()]} {currentMonth.getFullYear()}\n        </h3>\n        <div className=\"flex space-x-2\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={prevMonth}>\n            <ChevronLeft className=\"w-4 h-4\" />\n          </Button>\n          <Button variant=\"ghost\" size=\"icon\" onClick={nextMonth}>\n            <ChevronRight className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n      \n      {/* Calendar Grid */}\n      <div className=\"grid grid-cols-7 gap-1 mb-4\">\n        {[\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"].map((day, index) => (\n          <div key={`weekday-${index}`} className=\"text-center text-xs font-medium text-gray-400 p-2\">\n            {day}\n          </div>\n        ))}\n        \n        {/* Empty cells for days before month starts */}\n        {Array.from({ length: firstDayOfMonth }).map((_, index) => (\n          <div key={`empty-${index}`} className=\"p-2\"></div>\n        ))}\n        \n        {/* Calendar days */}\n        {Array.from({ length: daysInMonth }).map((_, index) => {\n          const day = index + 1;\n          return (\n            <div\n              key={day}\n              className={getDayClasses(day)}\n              onClick={() => handleDayClick(day)}\n            >\n              {day}\n            </div>\n          );\n        })}\n      </div>\n\n      {/* Legend */}\n      <div className=\"grid grid-cols-2 gap-4 text-xs\">\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-3 h-3 bg-coral-400 rounded\"></div>\n          <span className=\"text-gray-600 dark:text-gray-400\">Period</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-3 h-3 bg-primary-400 rounded\"></div>\n          <span className=\"text-gray-600 dark:text-gray-400\">Fertile Window</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-3 h-3 bg-yellow-400 rounded\"></div>\n          <span className=\"text-gray-600 dark:text-gray-400\">Ovulation</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"w-3 h-3 bg-primary-500 rounded\"></div>\n          <span className=\"text-gray-600 dark:text-gray-400\">Today</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":5456},"client/src/components/dashboard/AIInsights.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sparkles } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport function AIInsights() {\n  const { data: insights } = useQuery({\n    queryKey: [\"/api/ai/insights\"],\n  });\n\n  const latestInsights = (insights as any[])?.slice(0, 2) || [];\n\n  return (\n    <div className=\"bg-gradient-to-r from-primary-50 to-sage-50 dark:from-primary-900/20 dark:to-sage-900/20 rounded-xl p-6 border border-primary-100 dark:border-primary-800\">\n      <div className=\"flex items-center space-x-3 mb-4\">\n        <div className=\"w-8 h-8 bg-gradient-to-r from-primary-500 to-sage-500 rounded-lg flex items-center justify-center\">\n          <Sparkles className=\"w-4 h-4 text-white\" />\n        </div>\n        <h3 className=\"font-semibold text-gray-900 dark:text-white\">AI Insights</h3>\n      </div>\n      \n      <div className=\"space-y-3\">\n        {latestInsights.length > 0 ? (\n          latestInsights.map((insight: any) => (\n            <div key={insight.id} className=\"bg-white/50 dark:bg-gray-800/50 rounded-lg p-3\">\n              <p className=\"text-xs font-medium text-primary-600 dark:text-primary-400 mb-1\">\n                {insight.type.replace('_', ' ').replace(/\\b\\w/g, (l: string) => l.toUpperCase())}\n              </p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">{insight.content}</p>\n            </div>\n          ))\n        ) : (\n          <>\n            <p className=\"text-sm text-gray-700 dark:text-gray-300\">\n              Based on your cycle patterns, your fertility window is optimal for the next 2 days.\n            </p>\n            <div className=\"bg-white/50 dark:bg-gray-800/50 rounded-lg p-3\">\n              <p className=\"text-xs font-medium text-primary-600 dark:text-primary-400 mb-1\">Personalized Tip</p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-300\">\n                Consider increasing your folic acid intake during this phase for optimal health.\n              </p>\n            </div>\n          </>\n        )}\n        \n        <Link href=\"/ai\">\n          <Button \n            variant=\"ghost\" \n            className=\"w-full text-sm text-primary-600 dark:text-primary-400 font-medium py-2 hover:bg-white/50 dark:hover:bg-gray-800/50 rounded-lg transition-colors\"\n          >\n            Ask AI a Question →\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2442},"client/src/components/dashboard/CycleProgress.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function CycleProgress() {\n  const { data: currentCycle } = useQuery({\n    queryKey: [\"/api/cycles/current\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const cycleDay = stats?.cycleDay || 14;\n  const cycleLength = 28;\n  const progress = (cycleDay / cycleLength) * 100;\n  const strokeDasharray = 553; // 2 * π * 88\n  const strokeDashoffset = strokeDasharray - (strokeDasharray * progress) / 100;\n\n  const getPhase = (day: number) => {\n    if (day <= 5) return { name: \"Period\", color: \"text-coral-500\" };\n    if (day <= 11) return { name: \"Follicular\", color: \"text-sage-500\" };\n    if (day <= 16) return { name: \"Fertile Window\", color: \"text-primary-500\" };\n    if (day <= 18) return { name: \"Ovulation\", color: \"text-yellow-500\" };\n    return { name: \"Luteal\", color: \"text-sage-500\" };\n  };\n\n  const currentPhase = getPhase(cycleDay);\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Cycle Progress</h3>\n        <Button variant=\"ghost\" className=\"text-primary-500 text-sm font-medium\">\n          View Details\n        </Button>\n      </div>\n      \n      <div className=\"flex items-center justify-center mb-6\">\n        <div className=\"relative w-48 h-48\">\n          <svg className=\"w-full h-full progress-ring\">\n            <circle \n              cx=\"96\" \n              cy=\"96\" \n              r=\"88\" \n              stroke=\"currentColor\" \n              strokeWidth=\"8\" \n              fill=\"none\" \n              className=\"text-gray-200 dark:text-gray-700\"\n            />\n            <circle \n              cx=\"96\" \n              cy=\"96\" \n              r=\"88\" \n              stroke=\"#8B7ED8\" \n              strokeWidth=\"8\" \n              fill=\"none\" \n              strokeDasharray={strokeDasharray}\n              strokeDashoffset={strokeDashoffset}\n              strokeLinecap=\"round\"\n              className=\"transition-all duration-300\"\n            />\n          </svg>\n          <div className=\"absolute inset-0 flex flex-col items-center justify-center\">\n            <span className=\"text-3xl font-bold text-gray-900 dark:text-white\">{cycleDay}</span>\n            <span className=\"text-sm text-gray-500 dark:text-gray-400\">days</span>\n            <span className={`text-xs font-medium ${currentPhase.color}`}>\n              {currentPhase.name}\n            </span>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"flex justify-between text-sm\">\n        <div className=\"text-center\">\n          <div className=\"w-3 h-3 bg-coral-400 rounded-full mx-auto mb-1\"></div>\n          <span className=\"text-gray-600 dark:text-gray-400\">Period</span>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"w-3 h-3 bg-primary-400 rounded-full mx-auto mb-1\"></div>\n          <span className=\"text-gray-600 dark:text-gray-400\">Fertile</span>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"w-3 h-3 bg-yellow-400 rounded-full mx-auto mb-1\"></div>\n          <span className=\"text-gray-600 dark:text-gray-400\">Ovulation</span>\n        </div>\n        <div className=\"text-center\">\n          <div className=\"w-3 h-3 bg-sage-400 rounded-full mx-auto mb-1\"></div>\n          <span className=\"text-gray-600 dark:text-gray-400\">Luteal</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3578},"client/src/components/dashboard/QuickActions.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Heart, Smile, Plus } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport function QuickActions() {\n  const actions = [\n    {\n      icon: Heart,\n      label: \"Log Period\",\n      bgColor: \"bg-coral-50 dark:bg-coral-900/20 hover:bg-coral-100 dark:hover:bg-coral-900/30\",\n      iconBg: \"bg-coral-500\",\n      href: \"/cycle\",\n    },\n    {\n      icon: Smile,\n      label: \"Track Mood\",\n      bgColor: \"bg-sage-50 dark:bg-sage-900/20 hover:bg-sage-100 dark:hover:bg-sage-900/30\",\n      iconBg: \"bg-sage-500\",\n      href: \"/wellness\",\n    },\n    {\n      icon: Plus,\n      label: \"Add Symptom\",\n      bgColor: \"bg-primary-50 dark:bg-primary-900/20 hover:bg-primary-100 dark:hover:bg-primary-900/30\",\n      iconBg: \"bg-primary-500\",\n      href: \"/cycle\",\n    },\n  ];\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n      <h3 className=\"font-semibold text-gray-900 dark:text-white mb-4\">Quick Actions</h3>\n      <div className=\"space-y-3\">\n        {actions.map((action, index) => (\n          <Link key={index} href={action.href}>\n            <Button\n              variant=\"ghost\"\n              className={`w-full flex items-center space-x-3 p-3 ${action.bgColor} transition-colors`}\n            >\n              <div className={`w-8 h-8 ${action.iconBg} rounded-lg flex items-center justify-center`}>\n                <action.icon className=\"w-4 h-4 text-white\" />\n              </div>\n              <span className=\"font-medium text-gray-900 dark:text-white\">{action.label}</span>\n            </Button>\n          </Link>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":1654},"client/src/components/dashboard/StatsGrid.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Heart, Zap, Moon, Smile } from \"lucide-react\";\n\nexport function StatsGrid() {\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const statCards = [\n    {\n      icon: Heart,\n      value: stats?.cycleDay || 14,\n      label: \"Cycle Day\",\n      subtitle: \"28-day cycle\",\n      bgColor: \"bg-coral-100 dark:bg-coral-900/30\",\n      iconColor: \"text-coral-500\",\n    },\n    {\n      icon: Zap,\n      value: `${(stats?.steps || 8234).toLocaleString()}`,\n      label: \"Steps Today\",\n      subtitle: \"Goal: 10k\",\n      bgColor: \"bg-sage-100 dark:bg-sage-900/30\",\n      iconColor: \"text-sage-500\",\n    },\n    {\n      icon: Moon,\n      value: `${stats?.sleepHours || 7.5}h`,\n      label: \"Sleep\",\n      subtitle: \"Good quality\",\n      bgColor: \"bg-primary-100 dark:bg-primary-900/30\",\n      iconColor: \"text-primary-500\",\n    },\n    {\n      icon: Smile,\n      value: \"😊\",\n      label: \"Mood\",\n      subtitle: stats?.mood === \"happy\" ? \"Happy\" : \"Good\",\n      bgColor: \"bg-yellow-100 dark:bg-yellow-900/30\",\n      iconColor: \"text-yellow-500\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-8\">\n      {statCards.map((stat, index) => (\n        <div key={index} className=\"bg-white dark:bg-gray-800 rounded-xl p-4 shadow-sm\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className={`w-10 h-10 ${stat.bgColor} rounded-lg flex items-center justify-center`}>\n              <stat.icon className={`w-5 h-5 ${stat.iconColor}`} />\n            </div>\n            <span className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              {stat.value}\n            </span>\n          </div>\n          <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{stat.label}</p>\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">{stat.subtitle}</p>\n        </div>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1965},"client/src/components/dashboard/WelcomeCard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function WelcomeCard() {\n  const { data: user } = useQuery({\n    queryKey: [\"/api/user/profile\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/dashboard/stats\"],\n  });\n\n  const cycleDay = (stats as any)?.cycleDay || 14;\n  const isOvulating = cycleDay >= 12 && cycleDay <= 16;\n\n  return (\n    <div className=\"bg-gradient-to-r from-primary-500 to-sage-500 rounded-2xl p-6 mb-8 text-white relative overflow-hidden\">\n      <div className=\"relative z-10\">\n        <h2 className=\"text-2xl font-bold mb-2\">Good morning, {(user as any)?.name || 'Anna'}!</h2>\n        <p className=\"text-primary-100 mb-4\">\n          Today is day {cycleDay} of your cycle. \n          {isOvulating ? \" You're in your fertile window.\" : \" Track your symptoms today.\"}\n        </p>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-yellow-400 rounded-full animate-pulse\"></div>\n            <span className=\"text-sm\">\n              {isOvulating ? \"Ovulation predicted tomorrow\" : \"Next period in 14 days\"}\n            </span>\n          </div>\n        </div>\n      </div>\n      {/* Decorative background */}\n      <div className=\"absolute top-0 right-0 w-48 h-full opacity-20 rounded-r-2xl bg-gradient-to-l from-white/20 to-transparent\"></div>\n    </div>\n  );\n}\n","size_bytes":1407},"client/src/components/pregnancy/BabyDevelopment.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Baby, Ruler, Heart, Brain } from \"lucide-react\";\n\nexport function BabyDevelopment() {\n  const { data: user } = useQuery({\n    queryKey: [\"/api/user/profile\"],\n  });\n\n  // Calculate pregnancy week\n  const dueDate = user?.pregnancyDueDate ? new Date(user.pregnancyDueDate) : null;\n  const today = new Date();\n  const totalDays = 280; // 40 weeks\n  \n  let currentWeek = 0;\n  if (dueDate) {\n    const daysLeft = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n    const daysRemaining = Math.max(0, daysLeft);\n    const daysPassed = totalDays - daysRemaining;\n    currentWeek = Math.floor(daysPassed / 7);\n  }\n\n  // Baby development data by week\n  const developmentData: { [key: number]: { size: string; weight: string; development: string; milestone: string } } = {\n    4: { size: \"Poppy seed\", weight: \"< 1g\", development: \"Neural tube forming\", milestone: \"Heart begins to beat\" },\n    8: { size: \"Raspberry\", weight: \"1g\", development: \"All major organs forming\", milestone: \"Brain waves detectable\" },\n    12: { size: \"Lime\", weight: \"14g\", development: \"Fingernails growing\", milestone: \"Can make fists\" },\n    16: { size: \"Avocado\", weight: \"100g\", development: \"Facial features defined\", milestone: \"Can hear sounds\" },\n    20: { size: \"Banana\", weight: \"300g\", development: \"Hair and eyebrows growing\", milestone: \"Halfway point!\" },\n    24: { size: \"Ear of corn\", weight: \"600g\", development: \"Lungs developing rapidly\", milestone: \"Viable outside womb\" },\n    28: { size: \"Eggplant\", weight: \"1kg\", development: \"Eyes can open and close\", milestone: \"Third trimester begins\" },\n    32: { size: \"Squash\", weight: \"1.7kg\", development: \"Bones hardening\", milestone: \"Practicing breathing\" },\n    36: { size: \"Papaya\", weight: \"2.6kg\", development: \"Immune system developing\", milestone: \"Considered full-term soon\" },\n    40: { size: \"Watermelon\", weight: \"3.4kg\", development: \"Ready for birth\", milestone: \"Due date!\" }\n  };\n\n  // Find the closest development milestone\n  const milestones = Object.keys(developmentData).map(Number).sort((a, b) => a - b);\n  const currentMilestone = milestones.find(week => week >= currentWeek) || milestones[milestones.length - 1];\n  const development = developmentData[currentMilestone];\n\n  if (!user?.isPregnant || !development) {\n    return (\n      <Card className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n        <div className=\"text-center py-8\">\n          <Baby className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">Baby Development</h3>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Enable pregnancy tracking to see your baby's development milestones.\n          </p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"w-12 h-12 bg-gradient-to-r from-pink-500 to-purple-500 rounded-2xl flex items-center justify-center\">\n          <Baby className=\"w-6 h-6 text-white\" />\n        </div>\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Your Baby at Week {currentWeek}</h3>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">Development milestone</p>\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* Size Comparison */}\n        <div className=\"bg-gradient-to-r from-pink-50 to-purple-50 dark:from-pink-900/20 dark:to-purple-900/20 p-4 rounded-xl border border-pink-100 dark:border-pink-800\">\n          <div className=\"text-center\">\n            <div className=\"text-4xl mb-2\">🍼</div>\n            <h4 className=\"font-semibold text-gray-900 dark:text-white mb-1\">Size of a {development.size}</h4>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">Approximately {development.weight}</p>\n          </div>\n        </div>\n\n        {/* Development Stats */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/30 rounded-lg\">\n            <Ruler className=\"w-6 h-6 text-blue-500 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{development.size}</p>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">Size</p>\n          </div>\n          <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-900/30 rounded-lg\">\n            <Heart className=\"w-6 h-6 text-purple-500 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{development.weight}</p>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">Weight</p>\n          </div>\n        </div>\n\n        {/* Current Development */}\n        <div>\n          <div className=\"flex items-center space-x-2 mb-3\">\n            <Brain className=\"w-5 h-5 text-primary-500\" />\n            <h4 className=\"font-medium text-gray-900 dark:text-white\">This Week's Development</h4>\n          </div>\n          <div className=\"space-y-3\">\n            <div className=\"p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n              <p className=\"text-sm font-medium text-gray-900 dark:text-white mb-1\">Physical Growth</p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">{development.development}</p>\n            </div>\n            <div className=\"p-3 bg-primary-50 dark:bg-primary-900/30 rounded-lg\">\n              <p className=\"text-sm font-medium text-primary-700 dark:text-primary-300 mb-1\">Key Milestone</p>\n              <p className=\"text-sm text-primary-600 dark:text-primary-400\">{development.milestone}</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Weekly Tips */}\n        <div className=\"bg-sage-50 dark:bg-sage-900/30 p-4 rounded-lg\">\n          <h4 className=\"font-medium text-gray-900 dark:text-white mb-2\">This Week's Care Tips</h4>\n          <ul className=\"space-y-2 text-sm text-gray-600 dark:text-gray-400\">\n            <li className=\"flex items-start space-x-2\">\n              <div className=\"w-1.5 h-1.5 bg-sage-500 rounded-full mt-2 flex-shrink-0\"></div>\n              <span>Take your prenatal vitamins daily</span>\n            </li>\n            <li className=\"flex items-start space-x-2\">\n              <div className=\"w-1.5 h-1.5 bg-sage-500 rounded-full mt-2 flex-shrink-0\"></div>\n              <span>Stay hydrated with 8-10 glasses of water</span>\n            </li>\n            <li className=\"flex items-start space-x-2\">\n              <div className=\"w-1.5 h-1.5 bg-sage-500 rounded-full mt-2 flex-shrink-0\"></div>\n              <span>Get adequate rest and manage stress</span>\n            </li>\n            <li className=\"flex items-start space-x-2\">\n              <div className=\"w-1.5 h-1.5 bg-sage-500 rounded-full mt-2 flex-shrink-0\"></div>\n              <span>Continue regular exercise as approved by your doctor</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </Card>\n  );\n}","size_bytes":7125},"client/src/components/pregnancy/PregnancyProgress.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Baby, Calendar, Heart, Scale } from \"lucide-react\";\n\nexport function PregnancyProgress() {\n  const { data: user } = useQuery({\n    queryKey: [\"/api/user/profile\"],\n  });\n\n  const { data: milestones } = useQuery({\n    queryKey: [\"/api/pregnancy/milestones\"],\n  });\n\n  // Calculate pregnancy progress\n  const dueDate = user?.pregnancyDueDate ? new Date(user.pregnancyDueDate) : null;\n  const today = new Date();\n  const totalDays = 280; // 40 weeks\n  \n  let currentWeek = 0;\n  let daysRemaining = 0;\n  let progressPercent = 0;\n  \n  if (dueDate) {\n    const daysLeft = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));\n    daysRemaining = Math.max(0, daysLeft);\n    const daysPassed = totalDays - daysRemaining;\n    currentWeek = Math.floor(daysPassed / 7);\n    progressPercent = Math.min(100, (daysPassed / totalDays) * 100);\n  }\n\n  const trimester = currentWeek <= 12 ? 1 : currentWeek <= 26 ? 2 : 3;\n  \n  const trimesterInfo = {\n    1: { name: \"First Trimester\", color: \"from-pink-500 to-rose-400\", emoji: \"🌱\" },\n    2: { name: \"Second Trimester\", color: \"from-primary-500 to-purple-400\", emoji: \"🌸\" },\n    3: { name: \"Third Trimester\", color: \"from-coral-500 to-orange-400\", emoji: \"🌺\" }\n  };\n\n  const currentTrimester = trimesterInfo[trimester as keyof typeof trimesterInfo];\n\n  if (!user?.isPregnant) {\n    return (\n      <Card className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n        <div className=\"text-center py-8\">\n          <Baby className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">Not Currently Pregnant</h3>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Enable pregnancy tracking in your profile to monitor your journey.\n          </p>\n        </div>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className={`w-12 h-12 bg-gradient-to-r ${currentTrimester.color} rounded-2xl flex items-center justify-center text-2xl`}>\n          {currentTrimester.emoji}\n        </div>\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            Week {currentWeek} - {currentTrimester.name}\n          </h3>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n            {daysRemaining} days until due date\n          </p>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div>\n          <div className=\"flex justify-between items-center mb-2\">\n            <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">Pregnancy Progress</span>\n            <span className=\"text-sm font-bold text-gray-900 dark:text-white\">{progressPercent.toFixed(1)}%</span>\n          </div>\n          <Progress value={progressPercent} className=\"h-3\" />\n          <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\n            <span>Conception</span>\n            <span>Due Date</span>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"text-center p-4 bg-pink-50 dark:bg-pink-900/30 rounded-lg\">\n            <Calendar className=\"w-6 h-6 text-pink-500 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{currentWeek}</p>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">Weeks</p>\n          </div>\n          <div className=\"text-center p-4 bg-primary-50 dark:bg-primary-900/30 rounded-lg\">\n            <Heart className=\"w-6 h-6 text-primary-500 mx-auto mb-2\" />\n            <p className=\"text-lg font-bold text-gray-900 dark:text-white\">{trimester}</p>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">Trimester</p>\n          </div>\n        </div>\n\n        {dueDate && (\n          <div className=\"bg-gradient-to-r from-primary-50 to-pink-50 dark:from-primary-900/20 dark:to-pink-900/20 p-4 rounded-lg border border-primary-100 dark:border-primary-800\">\n            <div className=\"flex items-center space-x-3\">\n              <Baby className=\"w-6 h-6 text-primary-500\" />\n              <div>\n                <p className=\"font-medium text-gray-900 dark:text-white\">Due Date</p>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {dueDate.toLocaleDateString('en-US', { \n                    weekday: 'long', \n                    year: 'numeric', \n                    month: 'long', \n                    day: 'numeric' \n                  })}\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {milestones && (milestones as any[]).length > 0 && (\n        <div className=\"mt-6 pt-6 border-t border-gray-200 dark:border-gray-700\">\n          <h4 className=\"font-medium text-gray-900 dark:text-white mb-3\">Recent Milestones</h4>\n          <div className=\"space-y-2\">\n            {(milestones as any[]).slice(0, 3).map((milestone: any) => (\n              <div key={milestone.id} className=\"flex items-center space-x-3 p-2 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                <div className=\"w-2 h-2 bg-primary-500 rounded-full\"></div>\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{milestone.title}</p>\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                    Week {milestone.week} • {new Date(milestone.date).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </Card>\n  );\n}","size_bytes":5870},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/wellness/ActivityOverview.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ActivityOverviewProps {\n  wellness?: any;\n}\n\nexport function ActivityOverview({ wellness }: ActivityOverviewProps) {\n  const queryClient = useQueryClient();\n\n  const updateWellnessMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/wellness\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wellness\"] });\n    },\n  });\n\n  const today = new Date().toISOString().split('T')[0];\n  \n  const steps = wellness?.steps || 0;\n  const waterIntake = wellness?.waterIntake || 0;\n  const sleepHours = wellness?.sleepHours || 0;\n\n  const stepsProgress = Math.min(100, (steps / 10000) * 100);\n  const waterProgress = Math.min(100, (waterIntake / 3) * 100); // 3L daily goal\n  const sleepProgress = Math.min(100, (sleepHours / 8) * 100); // 8h daily goal\n\n  const updateSteps = () => {\n    const newSteps = prompt(\"Enter your current step count:\", steps.toString());\n    if (newSteps && !isNaN(parseInt(newSteps))) {\n      updateWellnessMutation.mutate({\n        date: today,\n        steps: parseInt(newSteps),\n        waterIntake: waterIntake,\n        sleepHours: sleepHours,\n        sleepQuality: wellness?.sleepQuality || 3,\n        exerciseMinutes: wellness?.exerciseMinutes || 0\n      });\n    }\n  };\n\n  const updateWater = () => {\n    const newWater = prompt(\"Enter water intake in liters:\", waterIntake.toString());\n    if (newWater && !isNaN(parseFloat(newWater))) {\n      updateWellnessMutation.mutate({\n        date: today,\n        steps: steps,\n        waterIntake: parseFloat(newWater),\n        sleepHours: sleepHours,\n        sleepQuality: wellness?.sleepQuality || 3,\n        exerciseMinutes: wellness?.exerciseMinutes || 0\n      });\n    }\n  };\n\n  const updateSleep = () => {\n    const newSleep = prompt(\"Enter sleep hours:\", sleepHours.toString());\n    if (newSleep && !isNaN(parseFloat(newSleep))) {\n      updateWellnessMutation.mutate({\n        date: today,\n        steps: steps,\n        waterIntake: waterIntake,\n        sleepHours: parseFloat(newSleep),\n        sleepQuality: wellness?.sleepQuality || 3,\n        exerciseMinutes: wellness?.exerciseMinutes || 0\n      });\n    }\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-6\">Today's Activity</h3>\n      <div className=\"grid grid-cols-3 gap-6\">\n        <div className=\"text-center cursor-pointer\" onClick={updateSteps}>\n          <div className=\"relative w-20 h-20 mx-auto mb-3\">\n            <svg className=\"w-full h-full progress-ring\">\n              <circle cx=\"40\" cy=\"40\" r=\"35\" stroke=\"currentColor\" strokeWidth=\"6\" fill=\"none\" className=\"text-gray-200 dark:text-gray-700\"/>\n              <circle \n                cx=\"40\" \n                cy=\"40\" \n                r=\"35\" \n                stroke=\"#10B981\" \n                strokeWidth=\"6\" \n                fill=\"none\" \n                strokeDasharray=\"220\" \n                strokeDashoffset={220 - (220 * stepsProgress) / 100}\n                strokeLinecap=\"round\"\n                className=\"transition-all duration-300\"\n              />\n            </svg>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <span className=\"text-lg font-bold text-gray-900 dark:text-white\">{Math.round(stepsProgress)}%</span>\n            </div>\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">{steps.toLocaleString()}</div>\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">Steps</div>\n        </div>\n\n        <div className=\"text-center cursor-pointer\" onClick={updateWater}>\n          <div className=\"relative w-20 h-20 mx-auto mb-3\">\n            <svg className=\"w-full h-full progress-ring\">\n              <circle cx=\"40\" cy=\"40\" r=\"35\" stroke=\"currentColor\" strokeWidth=\"6\" fill=\"none\" className=\"text-gray-200 dark:text-gray-700\"/>\n              <circle \n                cx=\"40\" \n                cy=\"40\" \n                r=\"35\" \n                stroke=\"#3B82F6\" \n                strokeWidth=\"6\" \n                fill=\"none\" \n                strokeDasharray=\"220\" \n                strokeDashoffset={220 - (220 * waterProgress) / 100}\n                strokeLinecap=\"round\"\n                className=\"transition-all duration-300\"\n              />\n            </svg>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <span className=\"text-lg font-bold text-gray-900 dark:text-white\">{Math.round(waterProgress)}%</span>\n            </div>\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">{waterIntake.toFixed(1)}L</div>\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">Water</div>\n        </div>\n\n        <div className=\"text-center cursor-pointer\" onClick={updateSleep}>\n          <div className=\"relative w-20 h-20 mx-auto mb-3\">\n            <svg className=\"w-full h-full progress-ring\">\n              <circle cx=\"40\" cy=\"40\" r=\"35\" stroke=\"currentColor\" strokeWidth=\"6\" fill=\"none\" className=\"text-gray-200 dark:text-gray-700\"/>\n              <circle \n                cx=\"40\" \n                cy=\"40\" \n                r=\"35\" \n                stroke=\"#8B7ED8\" \n                strokeWidth=\"6\" \n                fill=\"none\" \n                strokeDasharray=\"220\" \n                strokeDashoffset={220 - (220 * sleepProgress) / 100}\n                strokeLinecap=\"round\"\n                className=\"transition-all duration-300\"\n              />\n            </svg>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <span className=\"text-lg font-bold text-gray-900 dark:text-white\">{Math.round(sleepProgress)}%</span>\n            </div>\n          </div>\n          <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">{sleepHours.toFixed(1)}h</div>\n          <div className=\"text-sm text-gray-500 dark:text-gray-400\">Sleep</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6222},"client/src/components/wellness/MoodTracking.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function MoodTracking() {\n  const [selectedMood, setSelectedMood] = useState<string>(\"\");\n  const [energyLevel, setEnergyLevel] = useState<number>(5);\n  const queryClient = useQueryClient();\n\n  const { data: todayMood } = useQuery({\n    queryKey: [\"/api/moods\", { date: new Date().toISOString().split('T')[0] }],\n  });\n\n  const createMoodMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return apiRequest(\"POST\", \"/api/moods\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/moods\"] });\n    },\n  });\n\n  const moods = [\n    { emoji: \"😢\", label: \"Sad\", value: \"sad\" },\n    { emoji: \"😐\", label: \"Neutral\", value: \"neutral\" },\n    { emoji: \"😊\", label: \"Happy\", value: \"happy\" },\n    { emoji: \"😄\", label: \"Excited\", value: \"excited\" },\n    { emoji: \"😍\", label: \"Great\", value: \"great\" },\n  ];\n\n  const today = new Date().toISOString().split('T')[0];\n  const currentMood = (todayMood as any[])?.find((m: any) => m.date === today);\n\n  const handleMoodSelect = (mood: string) => {\n    setSelectedMood(mood);\n    createMoodMutation.mutate({\n      date: today,\n      mood,\n      energyLevel,\n      notes: \"\"\n    });\n  };\n\n  const handleEnergyChange = (level: number) => {\n    setEnergyLevel(level);\n    if (selectedMood || currentMood) {\n      createMoodMutation.mutate({\n        date: today,\n        mood: selectedMood || currentMood?.mood || \"neutral\",\n        energyLevel: level,\n        notes: \"\"\n      });\n    }\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Mood Tracking</h3>\n        <Button variant=\"ghost\" className=\"text-primary-500 text-sm font-medium\">\n          View History\n        </Button>\n      </div>\n      \n      <div className=\"space-y-4\">\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n            How are you feeling today?\n          </label>\n          <div className=\"flex justify-between\">\n            {moods.map((mood) => (\n              <button\n                key={mood.value}\n                onClick={() => handleMoodSelect(mood.value)}\n                className={`flex flex-col items-center p-3 rounded-lg transition-colors ${\n                  (selectedMood === mood.value || currentMood?.mood === mood.value)\n                    ? \"bg-primary-50 dark:bg-primary-900/30\"\n                    : \"hover:bg-gray-50 dark:hover:bg-gray-700\"\n                }`}\n              >\n                <span className=\"text-2xl mb-1\">{mood.emoji}</span>\n                <span className={`text-xs ${\n                  (selectedMood === mood.value || currentMood?.mood === mood.value)\n                    ? \"text-primary-600 dark:text-primary-400 font-medium\"\n                    : \"text-gray-500 dark:text-gray-400\"\n                }`}>\n                  {mood.label}\n                </span>\n              </button>\n            ))}\n          </div>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n            Energy Level: {energyLevel}/10\n          </label>\n          <input \n            type=\"range\" \n            min=\"1\" \n            max=\"10\" \n            value={energyLevel}\n            onChange={(e) => handleEnergyChange(parseInt(e.target.value))}\n            className=\"w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-lg appearance-none cursor-pointer slider\"\n          />\n          <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\n            <span>Low</span>\n            <span>High</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4025},"client/src/components/wellness/WellnessChart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card } from \"@/components/ui/card\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar } from \"recharts\";\nimport { TrendingUp, Activity, Droplets, Moon } from \"lucide-react\";\n\nexport function WellnessChart() {\n  const { data: wellness } = useQuery({\n    queryKey: [\"/api/wellness\"],\n  });\n\n  // Process data for charts\n  const wellnessData = (wellness as any[])?.slice(-7).map((item) => ({\n    date: new Date(item.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n    steps: item.steps || 0,\n    water: item.waterIntake || 0,\n    sleep: item.sleepHours || 0,\n    exercise: item.exerciseMinutes || 0,\n  })) || [];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Activity Overview */}\n      <Card className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-8 h-8 bg-gradient-to-r from-sage-500 to-primary-500 rounded-lg flex items-center justify-center\">\n            <TrendingUp className=\"w-4 h-4 text-white\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Weekly Activity</h3>\n        </div>\n\n        <div className=\"h-80\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={wellnessData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n              <XAxis \n                dataKey=\"date\" \n                stroke=\"#9CA3AF\"\n                fontSize={12}\n              />\n              <YAxis stroke=\"#9CA3AF\" fontSize={12} />\n              <Tooltip \n                contentStyle={{\n                  backgroundColor: '#F9FAFB',\n                  border: '1px solid #E5E7EB',\n                  borderRadius: '8px',\n                }}\n              />\n              <Legend />\n              <Line\n                type=\"monotone\"\n                dataKey=\"steps\"\n                stroke=\"#10B981\"\n                strokeWidth={2}\n                dot={{ fill: '#10B981', strokeWidth: 2, r: 4 }}\n                name=\"Steps\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"water\"\n                stroke=\"#3B82F6\"\n                strokeWidth={2}\n                dot={{ fill: '#3B82F6', strokeWidth: 2, r: 4 }}\n                name=\"Water (L)\"\n              />\n              <Line\n                type=\"monotone\"\n                dataKey=\"sleep\"\n                stroke=\"#8B5CF6\"\n                strokeWidth={2}\n                dot={{ fill: '#8B5CF6', strokeWidth: 2, r: 4 }}\n                name=\"Sleep (hrs)\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </Card>\n\n      {/* Exercise Chart */}\n      <Card className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n        <div className=\"flex items-center space-x-3 mb-6\">\n          <div className=\"w-8 h-8 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-lg flex items-center justify-center\">\n            <Activity className=\"w-4 h-4 text-white\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Exercise Minutes</h3>\n        </div>\n\n        <div className=\"h-60\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <BarChart data={wellnessData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#E5E7EB\" />\n              <XAxis \n                dataKey=\"date\" \n                stroke=\"#9CA3AF\"\n                fontSize={12}\n              />\n              <YAxis stroke=\"#9CA3AF\" fontSize={12} />\n              <Tooltip \n                contentStyle={{\n                  backgroundColor: '#F9FAFB',\n                  border: '1px solid #E5E7EB',\n                  borderRadius: '8px',\n                }}\n              />\n              <Bar\n                dataKey=\"exercise\"\n                fill=\"#F59E0B\"\n                radius={[4, 4, 0, 0]}\n                name=\"Exercise Minutes\"\n              />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      </Card>\n\n      {/* Quick Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        <Card className=\"bg-gradient-to-r from-sage-50 to-green-50 dark:from-sage-900/20 dark:to-green-900/20 p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-sage-500 rounded-lg flex items-center justify-center\">\n              <Activity className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {wellnessData.reduce((sum, day) => sum + day.steps, 0).toLocaleString()}\n              </p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total Steps (7 days)</p>\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-blue-50 to-cyan-50 dark:from-blue-900/20 dark:to-cyan-900/20 p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center\">\n              <Droplets className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {wellnessData.reduce((sum, day) => sum + day.water, 0).toFixed(1)}L\n              </p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total Water (7 days)</p>\n            </div>\n          </div>\n        </Card>\n\n        <Card className=\"bg-gradient-to-r from-primary-50 to-purple-50 dark:from-primary-900/20 dark:to-purple-900/20 p-4\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-10 h-10 bg-primary-500 rounded-lg flex items-center justify-center\">\n              <Moon className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {(wellnessData.reduce((sum, day) => sum + day.sleep, 0) / wellnessData.length || 0).toFixed(1)}h\n              </p>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Avg Sleep (7 days)</p>\n            </div>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6391},"client/src/components/wellness/WellnessForm.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card } from \"@/components/ui/card\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Activity, Droplets, Moon, Heart, Clock } from \"lucide-react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function WellnessForm() {\n  const [date, setDate] = useState(new Date().toISOString().split('T')[0]);\n  const [steps, setSteps] = useState([8000]);\n  const [waterIntake, setWaterIntake] = useState([2.5]);\n  const [sleepHours, setSleepHours] = useState([7.5]);\n  const [sleepQuality, setSleepQuality] = useState([4]);\n  const [exerciseMinutes, setExerciseMinutes] = useState([30]);\n\n  const queryClient = useQueryClient();\n\n  const addWellnessMutation = useMutation({\n    mutationFn: async (wellnessData: any) => {\n      return apiRequest(\"POST\", \"/api/wellness\", wellnessData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wellness\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    addWellnessMutation.mutate({\n      date,\n      steps: steps[0],\n      waterIntake: waterIntake[0],\n      sleepHours: sleepHours[0],\n      sleepQuality: sleepQuality[0],\n      exerciseMinutes: exerciseMinutes[0],\n    });\n  };\n\n  return (\n    <Card className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-sm\">\n      <div className=\"flex items-center space-x-3 mb-6\">\n        <div className=\"w-8 h-8 bg-gradient-to-r from-sage-500 to-primary-500 rounded-lg flex items-center justify-center\">\n          <Activity className=\"w-4 h-4 text-white\" />\n        </div>\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Log Wellness Data</h3>\n      </div>\n\n      <form onSubmit={handleSubmit} className=\"space-y-6\">\n        <div>\n          <Label htmlFor=\"date\" className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n            Date\n          </Label>\n          <Input\n            id=\"date\"\n            type=\"date\"\n            value={date}\n            onChange={(e) => setDate(e.target.value)}\n            className=\"mt-1\"\n            data-testid=\"wellness-date-input\"\n          />\n        </div>\n\n        <div className=\"space-y-4\">\n          <div>\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Activity className=\"w-4 h-4 text-sage-500\" />\n              <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Steps: {steps[0].toLocaleString()}\n              </Label>\n            </div>\n            <Slider\n              value={steps}\n              onValueChange={setSteps}\n              max={20000}\n              step={500}\n              className=\"w-full\"\n              data-testid=\"steps-slider\"\n            />\n            <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\n              <span>0</span>\n              <span>10k (goal)</span>\n              <span>20k</span>\n            </div>\n          </div>\n\n          <div>\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Droplets className=\"w-4 h-4 text-blue-500\" />\n              <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Water Intake: {waterIntake[0]}L\n              </Label>\n            </div>\n            <Slider\n              value={waterIntake}\n              onValueChange={setWaterIntake}\n              max={5}\n              step={0.1}\n              className=\"w-full\"\n              data-testid=\"water-slider\"\n            />\n            <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\n              <span>0L</span>\n              <span>2.5L (goal)</span>\n              <span>5L</span>\n            </div>\n          </div>\n\n          <div>\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Moon className=\"w-4 h-4 text-primary-500\" />\n              <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Sleep Hours: {sleepHours[0]}h\n              </Label>\n            </div>\n            <Slider\n              value={sleepHours}\n              onValueChange={setSleepHours}\n              max={12}\n              step={0.5}\n              className=\"w-full\"\n              data-testid=\"sleep-hours-slider\"\n            />\n            <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\n              <span>0h</span>\n              <span>8h (goal)</span>\n              <span>12h</span>\n            </div>\n          </div>\n\n          <div>\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Heart className=\"w-4 h-4 text-coral-500\" />\n              <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Sleep Quality: {sleepQuality[0]}/5\n              </Label>\n            </div>\n            <Slider\n              value={sleepQuality}\n              onValueChange={setSleepQuality}\n              max={5}\n              step={1}\n              className=\"w-full\"\n              data-testid=\"sleep-quality-slider\"\n            />\n            <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\n              <span>Poor</span>\n              <span>Good</span>\n              <span>Excellent</span>\n            </div>\n          </div>\n\n          <div>\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <Clock className=\"w-4 h-4 text-yellow-500\" />\n              <Label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                Exercise: {exerciseMinutes[0]} minutes\n              </Label>\n            </div>\n            <Slider\n              value={exerciseMinutes}\n              onValueChange={setExerciseMinutes}\n              max={120}\n              step={5}\n              className=\"w-full\"\n              data-testid=\"exercise-slider\"\n            />\n            <div className=\"flex justify-between text-xs text-gray-500 dark:text-gray-400 mt-1\">\n              <span>0min</span>\n              <span>30min (goal)</span>\n              <span>120min</span>\n            </div>\n          </div>\n        </div>\n\n        <Button\n          type=\"submit\"\n          disabled={addWellnessMutation.isPending}\n          className=\"w-full bg-gradient-to-r from-sage-500 to-primary-500 text-white hover:from-sage-600 hover:to-primary-600\"\n          data-testid=\"submit-wellness-button\"\n        >\n          {addWellnessMutation.isPending ? \"Saving...\" : \"Log Wellness Data\"}\n        </Button>\n      </form>\n    </Card>\n  );\n}","size_bytes":6849}}}